/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../../common";
import type {
  MockCEth,
  MockCEthInterface,
} from "../../../../contracts/reserve-manager/stub/MockCEth";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "admin_",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [],
    name: "admin",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "reduceReserves",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "totalReserves_",
        type: "uint256",
      },
    ],
    name: "setTotalReserves",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "symbol",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "totalReserves",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b5060405161040438038061040483398101604081905261002f91610116565b600080546001600160a01b0319166001600160a01b038316179055604080518082019091526005808252640c6e48aa8960db1b60209092019182526100769160019161007d565b5050610181565b82805461008990610146565b90600052602060002090601f0160209004810192826100ab57600085556100f1565b82601f106100c457805160ff19168380011785556100f1565b828001600101855582156100f1579182015b828111156100f15782518255916020019190600101906100d6565b506100fd929150610101565b5090565b5b808211156100fd5760008155600101610102565b60006020828403121561012857600080fd5b81516001600160a01b038116811461013f57600080fd5b9392505050565b600181811c9082168061015a57607f821691505b6020821081141561017b57634e487b7160e01b600052602260045260246000fd5b50919050565b610274806101906000396000f3fe608060405234801561001057600080fd5b50600436106100575760003560e01c806307e279591461005c5780638f840ddd1461007157806395d89b4114610087578063b0e0bf2a1461009c578063f851a440146100af575b600080fd5b61006f61006a366004610170565b6100ca565b005b6002546040519081526020015b60405180910390f35b61008f6100de565b60405161007e9190610189565b61006f6100aa366004610170565b600255565b6000546040516001600160a01b03909116815260200161007e565b806002546100d891906101de565b60025550565b6060600180546100ed90610203565b80601f016020809104026020016040519081016040528092919081815260200182805461011990610203565b80156101665780601f1061013b57610100808354040283529160200191610166565b820191906000526020600020905b81548152906001019060200180831161014957829003601f168201915b5050505050905090565b60006020828403121561018257600080fd5b5035919050565b600060208083528351808285015260005b818110156101b65785810183015185820160400152820161019a565b818111156101c8576000604083870101525b50601f01601f1916929092016040019392505050565b6000828210156101fe57634e487b7160e01b600052601160045260246000fd5b500390565b600181811c9082168061021757607f821691505b6020821081141561023857634e487b7160e01b600052602260045260246000fd5b5091905056fea26469706673582212203928d9e210ad2cda787a2a35b5f41a84d5590f7b64d99214e10209fcbad072b564736f6c634300080b0033";

type MockCEthConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: MockCEthConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class MockCEth__factory extends ContractFactory {
  constructor(...args: MockCEthConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    admin_: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<MockCEth> {
    return super.deploy(admin_, overrides || {}) as Promise<MockCEth>;
  }
  override getDeployTransaction(
    admin_: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(admin_, overrides || {});
  }
  override attach(address: string): MockCEth {
    return super.attach(address) as MockCEth;
  }
  override connect(signer: Signer): MockCEth__factory {
    return super.connect(signer) as MockCEth__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): MockCEthInterface {
    return new utils.Interface(_abi) as MockCEthInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): MockCEth {
    return new Contract(address, _abi, signerOrProvider) as MockCEth;
  }
}
