/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../../common";
import type {
  MockComptroller,
  MockComptrollerInterface,
} from "../../../../contracts/reserve-manager/stub/MockComptroller";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "cTokenAddress",
        type: "address",
      },
    ],
    name: "isMarketListed",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "cTokenAddress",
        type: "address",
      },
      {
        internalType: "bool",
        name: "isListed",
        type: "bool",
      },
    ],
    name: "setmarketListed",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b50610166806100206000396000f3fe608060405234801561001057600080fd5b50600436106100365760003560e01c80630d0ab2291461003b5780633d98a1e514610076575b600080fd5b6100746100493660046100d2565b6001600160a01b03919091166000908152602081905260409020805460ff1916911515919091179055565b005b6100a261008436600461010e565b6001600160a01b031660009081526020819052604090205460ff1690565b604051901515815260200160405180910390f35b80356001600160a01b03811681146100cd57600080fd5b919050565b600080604083850312156100e557600080fd5b6100ee836100b6565b91506020830135801515811461010357600080fd5b809150509250929050565b60006020828403121561012057600080fd5b610129826100b6565b939250505056fea26469706673582212201eab8f5405b22de7bfcba672468a1d9bd4a8e793e40b2d0b8d34e6b261ee716b64736f6c634300080b0033";

type MockComptrollerConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: MockComptrollerConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class MockComptroller__factory extends ContractFactory {
  constructor(...args: MockComptrollerConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<MockComptroller> {
    return super.deploy(overrides || {}) as Promise<MockComptroller>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): MockComptroller {
    return super.attach(address) as MockComptroller;
  }
  override connect(signer: Signer): MockComptroller__factory {
    return super.connect(signer) as MockComptroller__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): MockComptrollerInterface {
    return new utils.Interface(_abi) as MockComptrollerInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): MockComptroller {
    return new Contract(address, _abi, signerOrProvider) as MockComptroller;
  }
}
