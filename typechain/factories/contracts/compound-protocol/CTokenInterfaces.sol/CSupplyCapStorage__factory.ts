/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../../common";
import type {
  CSupplyCapStorage,
  CSupplyCapStorageInterface,
} from "../../../../contracts/compound-protocol/CTokenInterfaces.sol/CSupplyCapStorage";

const _abi = [
  {
    constant: true,
    inputs: [],
    name: "internalCash",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    payable: false,
    stateMutability: "view",
    type: "function",
  },
];

const _bytecode =
  "0x6080604052348015600f57600080fd5b5060808061001e6000396000f3fe6080604052348015600f57600080fd5b506004361060285760003560e01c806322abdbf514602d575b600080fd5b60336045565b60408051918252519081900360200190f35b6000548156fea265627a7a723158204139c0fa71bf6b8f960ed843ba7ad6e5b900c7dbc64c21c44ed7db469574f58a64736f6c63430005110032";

type CSupplyCapStorageConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: CSupplyCapStorageConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class CSupplyCapStorage__factory extends ContractFactory {
  constructor(...args: CSupplyCapStorageConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<CSupplyCapStorage> {
    return super.deploy(overrides || {}) as Promise<CSupplyCapStorage>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): CSupplyCapStorage {
    return super.attach(address) as CSupplyCapStorage;
  }
  override connect(signer: Signer): CSupplyCapStorage__factory {
    return super.connect(signer) as CSupplyCapStorage__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): CSupplyCapStorageInterface {
    return new utils.Interface(_abi) as CSupplyCapStorageInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): CSupplyCapStorage {
    return new Contract(address, _abi, signerOrProvider) as CSupplyCapStorage;
  }
}
