/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Signer,
  utils,
  Contract,
  ContractFactory,
  BigNumberish,
  Overrides,
} from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../common";
import type {
  JumpRateModelV2,
  JumpRateModelV2Interface,
} from "../../../contracts/compound-protocol/JumpRateModelV2";

const _abi = [
  {
    inputs: [
      {
        internalType: "uint256",
        name: "baseRatePerYear",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "multiplierPerYear",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "jumpMultiplierPerYear",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "kink_",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "roof_",
        type: "uint256",
      },
      {
        internalType: "address",
        name: "owner_",
        type: "address",
      },
    ],
    payable: false,
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "uint256",
        name: "baseRatePerBlock",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "multiplierPerBlock",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "jumpMultiplierPerBlock",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "kink",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "roof",
        type: "uint256",
      },
    ],
    name: "NewInterestParams",
    type: "event",
  },
  {
    constant: true,
    inputs: [],
    name: "baseRatePerBlock",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    payable: false,
    stateMutability: "view",
    type: "function",
  },
  {
    constant: true,
    inputs: [],
    name: "blocksPerYear",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    payable: false,
    stateMutability: "view",
    type: "function",
  },
  {
    constant: true,
    inputs: [
      {
        internalType: "uint256",
        name: "cash",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "borrows",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "reserves",
        type: "uint256",
      },
    ],
    name: "getBorrowRate",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    payable: false,
    stateMutability: "view",
    type: "function",
  },
  {
    constant: true,
    inputs: [
      {
        internalType: "uint256",
        name: "cash",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "borrows",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "reserves",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "reserveFactorMantissa",
        type: "uint256",
      },
    ],
    name: "getSupplyRate",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    payable: false,
    stateMutability: "view",
    type: "function",
  },
  {
    constant: true,
    inputs: [],
    name: "isInterestRateModel",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    payable: false,
    stateMutability: "view",
    type: "function",
  },
  {
    constant: true,
    inputs: [],
    name: "jumpMultiplierPerBlock",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    payable: false,
    stateMutability: "view",
    type: "function",
  },
  {
    constant: true,
    inputs: [],
    name: "kink",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    payable: false,
    stateMutability: "view",
    type: "function",
  },
  {
    constant: true,
    inputs: [],
    name: "multiplierPerBlock",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    payable: false,
    stateMutability: "view",
    type: "function",
  },
  {
    constant: true,
    inputs: [],
    name: "owner",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    payable: false,
    stateMutability: "view",
    type: "function",
  },
  {
    constant: true,
    inputs: [],
    name: "roof",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    payable: false,
    stateMutability: "view",
    type: "function",
  },
  {
    constant: false,
    inputs: [
      {
        internalType: "uint256",
        name: "baseRatePerYear",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "multiplierPerYear",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "jumpMultiplierPerYear",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "kink_",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "roof_",
        type: "uint256",
      },
    ],
    name: "updateJumpRateModel",
    outputs: [],
    payable: false,
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    constant: true,
    inputs: [
      {
        internalType: "uint256",
        name: "cash",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "borrows",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "reserves",
        type: "uint256",
      },
    ],
    name: "utilizationRate",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    payable: false,
    stateMutability: "view",
    type: "function",
  },
];

const _bytecode =
  "0x60806040523480156200001157600080fd5b5060405162000b7138038062000b71833981810160405260c08110156200003757600080fd5b508051602082015160408301516060840151608085015160a090950151600080546001600160a01b0319166001600160a01b038316179055939492939192909162000086868686868662000092565b5050505050506200033f565b670de0b6b3a7640000811015620000e5576040805162461bcd60e51b8152602060048201526012602482015271696e76616c696420726f6f662076616c756560701b604482015290519081900360640190fd5b620001036301e1338086620001e760201b620004a81790919060201c565b6002556200015c620001266301e13380846200023a602090811b6200044617901c565b62000148670de0b6b3a7640000876200023a60201b620004461790919060201c565b620001e760201b620004a81790919060201c565b6001556200017b836301e13380620001e7602090811b620004a817901c565b60038190556004839055600582905560025460015460408051928352602083019190915281810192909252606081018490526080810183905290517fd4a5368e470b1a5bcef19c35c285f3c1507a740d3a0044927d719c8a81bb1cdd9181900360a00190a15050505050565b60006200023183836040518060400160405280601a81526020017f536166654d6174683a206469766973696f6e206279207a65726f0000000000008152506200029860201b60201c565b90505b92915050565b6000826200024b5750600062000234565b828202828482816200025957fe5b0414620002315760405162461bcd60e51b815260040180806020018281038252602181526020018062000b506021913960400191505060405180910390fd5b60008183620003285760405162461bcd60e51b81526004018080602001828103825283818151815260200191508051906020019080838360005b83811015620002ec578181015183820152602001620002d2565b50505050905090810190601f1680156200031a5780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b5060008385816200033557fe5b0495945050505050565b610801806200034f6000396000f3fe608060405234801561001057600080fd5b50600436106100b45760003560e01c806391a30e8d1161007157806391a30e8d1461016d578063a385fb96146101a4578063b8168816146101ac578063b9f9850a146101db578063f14039de146101e3578063fd2da339146101eb576100b4565b806315f24053146100b95780632191f92a146100f4578063573be0fb146101105780636e71e2d8146101185780638726bb89146101415780638da5cb5b14610149575b600080fd5b6100e2600480360360608110156100cf57600080fd5b50803590602081013590604001356101f3565b60408051918252519081900360200190f35b6100fc6102cb565b604080519115158252519081900360200190f35b6100e26102d0565b6100e26004803603606081101561012e57600080fd5b50803590602081013590604001356102d6565b6100e261033b565b610151610341565b604080516001600160a01b039092168252519081900360200190f35b6101a2600480360360a081101561018357600080fd5b5080359060208101359060408101359060608101359060800135610350565b005b6100e26103ad565b6100e2600480360360808110156101c257600080fd5b50803590602081013590604081013590606001356103b5565b6100e2610434565b6100e261043a565b6100e2610440565b6000806102018585856102d6565b905060045481116102535761024b60025461023f670de0b6b3a76400006102336001548661044690919063ffffffff16565b9063ffffffff6104a816565b9063ffffffff6104ea16565b9150506102c4565b600061027e60025461023f670de0b6b3a764000061023360015460045461044690919063ffffffff16565b905060006102976004548461054490919063ffffffff16565b90506102be8261023f670de0b6b3a76400006102336003548661044690919063ffffffff16565b93505050505b9392505050565b600181565b60055481565b6000826102e5575060006102c4565b600061032261030a846102fe888863ffffffff6104ea16565b9063ffffffff61054416565b61023386670de0b6b3a764000063ffffffff61044616565b905060055481111561033357506005545b949350505050565b60015481565b6000546001600160a01b031681565b6000546001600160a01b031633146103995760405162461bcd60e51b81526004018080602001828103825260268152602001806107a76026913960400191505060405180910390fd5b6103a68585858585610586565b5050505050565b6301e1338081565b6000806103d0670de0b6b3a76400008463ffffffff61054416565b905060006103df8787876101f3565b905060006103ff670de0b6b3a7640000610233848663ffffffff61044616565b9050610428670de0b6b3a76400006102338361041c8c8c8c6102d6565b9063ffffffff61044616565b98975050505050505050565b60035481565b60025481565b60045481565b600082610455575060006104a2565b8282028284828161046257fe5b041461049f5760405162461bcd60e51b81526004018080602001828103825260218152602001806107866021913960400191505060405180910390fd5b90505b92915050565b600061049f83836040518060400160405280601a81526020017f536166654d6174683a206469766973696f6e206279207a65726f000000000000815250610689565b60008282018381101561049f576040805162461bcd60e51b815260206004820152601b60248201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604482015290519081900360640190fd5b600061049f83836040518060400160405280601f81526020017f536166654d6174683a207375627472616374696f6e20756e646572666c6f770081525061072b565b670de0b6b3a76400008110156105d8576040805162461bcd60e51b8152602060048201526012602482015271696e76616c696420726f6f662076616c756560701b604482015290519081900360640190fd5b6105ec856301e1338063ffffffff6104a816565b60025561060661030a6301e133808463ffffffff61044616565b60015561061d836301e1338063ffffffff6104a816565b60038190556004839055600582905560025460015460408051928352602083019190915281810192909252606081018490526080810183905290517fd4a5368e470b1a5bcef19c35c285f3c1507a740d3a0044927d719c8a81bb1cdd9181900360a00190a15050505050565b600081836107155760405162461bcd60e51b81526004018080602001828103825283818151815260200191508051906020019080838360005b838110156106da5781810151838201526020016106c2565b50505050905090810190601f1680156107075780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b50600083858161072157fe5b0495945050505050565b6000818484111561077d5760405162461bcd60e51b81526020600482018181528351602484015283519092839260449091019190850190808383600083156106da5781810151838201526020016106c2565b50505090039056fe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f776f6e6c7920746865206f776e6572206d61792063616c6c20746869732066756e6374696f6e2ea265627a7a723158204f15e54929df16a0de3eb2c5e17262049c40b56211b571b50a536672134dea9164736f6c63430005110032536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f77";

type JumpRateModelV2ConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: JumpRateModelV2ConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class JumpRateModelV2__factory extends ContractFactory {
  constructor(...args: JumpRateModelV2ConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    baseRatePerYear: PromiseOrValue<BigNumberish>,
    multiplierPerYear: PromiseOrValue<BigNumberish>,
    jumpMultiplierPerYear: PromiseOrValue<BigNumberish>,
    kink_: PromiseOrValue<BigNumberish>,
    roof_: PromiseOrValue<BigNumberish>,
    owner_: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<JumpRateModelV2> {
    return super.deploy(
      baseRatePerYear,
      multiplierPerYear,
      jumpMultiplierPerYear,
      kink_,
      roof_,
      owner_,
      overrides || {}
    ) as Promise<JumpRateModelV2>;
  }
  override getDeployTransaction(
    baseRatePerYear: PromiseOrValue<BigNumberish>,
    multiplierPerYear: PromiseOrValue<BigNumberish>,
    jumpMultiplierPerYear: PromiseOrValue<BigNumberish>,
    kink_: PromiseOrValue<BigNumberish>,
    roof_: PromiseOrValue<BigNumberish>,
    owner_: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(
      baseRatePerYear,
      multiplierPerYear,
      jumpMultiplierPerYear,
      kink_,
      roof_,
      owner_,
      overrides || {}
    );
  }
  override attach(address: string): JumpRateModelV2 {
    return super.attach(address) as JumpRateModelV2;
  }
  override connect(signer: Signer): JumpRateModelV2__factory {
    return super.connect(signer) as JumpRateModelV2__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): JumpRateModelV2Interface {
    return new utils.Interface(_abi) as JumpRateModelV2Interface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): JumpRateModelV2 {
    return new Contract(address, _abi, signerOrProvider) as JumpRateModelV2;
  }
}
