/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../../../common";
import type {
  CompoundLens,
  CompoundLensInterface,
} from "../../../../../contracts/compound-protocol/Lens/CompoundLens.sol/CompoundLens";

const _abi = [
  {
    constant: false,
    inputs: [
      {
        internalType: "contract CToken",
        name: "cToken",
        type: "address",
      },
      {
        internalType: "address payable",
        name: "account",
        type: "address",
      },
    ],
    name: "cTokenBalances",
    outputs: [
      {
        components: [
          {
            internalType: "address",
            name: "cToken",
            type: "address",
          },
          {
            internalType: "uint256",
            name: "balanceOf",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "borrowBalanceCurrent",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "balanceOfUnderlying",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "tokenBalance",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "tokenAllowance",
            type: "uint256",
          },
          {
            internalType: "bool",
            name: "collateralEnabled",
            type: "bool",
          },
          {
            internalType: "uint256",
            name: "collateralBalance",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "nativeTokenBalance",
            type: "uint256",
          },
        ],
        internalType: "struct CompoundLens.CTokenBalances",
        name: "",
        type: "tuple",
      },
    ],
    payable: false,
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    constant: false,
    inputs: [
      {
        internalType: "contract CToken[]",
        name: "cTokens",
        type: "address[]",
      },
      {
        internalType: "address payable",
        name: "account",
        type: "address",
      },
    ],
    name: "cTokenBalancesAll",
    outputs: [
      {
        components: [
          {
            internalType: "address",
            name: "cToken",
            type: "address",
          },
          {
            internalType: "uint256",
            name: "balanceOf",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "borrowBalanceCurrent",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "balanceOfUnderlying",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "tokenBalance",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "tokenAllowance",
            type: "uint256",
          },
          {
            internalType: "bool",
            name: "collateralEnabled",
            type: "bool",
          },
          {
            internalType: "uint256",
            name: "collateralBalance",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "nativeTokenBalance",
            type: "uint256",
          },
        ],
        internalType: "struct CompoundLens.CTokenBalances[]",
        name: "",
        type: "tuple[]",
      },
    ],
    payable: false,
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    constant: false,
    inputs: [
      {
        internalType: "contract CToken",
        name: "cToken",
        type: "address",
      },
    ],
    name: "cTokenMetadata",
    outputs: [
      {
        components: [
          {
            internalType: "address",
            name: "cToken",
            type: "address",
          },
          {
            internalType: "uint256",
            name: "exchangeRateCurrent",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "supplyRatePerBlock",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "borrowRatePerBlock",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "reserveFactorMantissa",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "totalBorrows",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "totalReserves",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "totalSupply",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "totalCash",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "totalCollateralTokens",
            type: "uint256",
          },
          {
            internalType: "bool",
            name: "isListed",
            type: "bool",
          },
          {
            internalType: "uint256",
            name: "collateralFactorMantissa",
            type: "uint256",
          },
          {
            internalType: "address",
            name: "underlyingAssetAddress",
            type: "address",
          },
          {
            internalType: "uint256",
            name: "cTokenDecimals",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "underlyingDecimals",
            type: "uint256",
          },
          {
            internalType: "enum ComptrollerV1Storage.Version",
            name: "version",
            type: "uint8",
          },
          {
            internalType: "uint256",
            name: "collateralCap",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "underlyingPrice",
            type: "uint256",
          },
          {
            internalType: "bool",
            name: "supplyPaused",
            type: "bool",
          },
          {
            internalType: "bool",
            name: "borrowPaused",
            type: "bool",
          },
          {
            internalType: "uint256",
            name: "supplyCap",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "borrowCap",
            type: "uint256",
          },
        ],
        internalType: "struct CompoundLens.CTokenMetadata",
        name: "",
        type: "tuple",
      },
    ],
    payable: false,
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    constant: false,
    inputs: [
      {
        internalType: "contract CToken[]",
        name: "cTokens",
        type: "address[]",
      },
    ],
    name: "cTokenMetadataAll",
    outputs: [
      {
        components: [
          {
            internalType: "address",
            name: "cToken",
            type: "address",
          },
          {
            internalType: "uint256",
            name: "exchangeRateCurrent",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "supplyRatePerBlock",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "borrowRatePerBlock",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "reserveFactorMantissa",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "totalBorrows",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "totalReserves",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "totalSupply",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "totalCash",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "totalCollateralTokens",
            type: "uint256",
          },
          {
            internalType: "bool",
            name: "isListed",
            type: "bool",
          },
          {
            internalType: "uint256",
            name: "collateralFactorMantissa",
            type: "uint256",
          },
          {
            internalType: "address",
            name: "underlyingAssetAddress",
            type: "address",
          },
          {
            internalType: "uint256",
            name: "cTokenDecimals",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "underlyingDecimals",
            type: "uint256",
          },
          {
            internalType: "enum ComptrollerV1Storage.Version",
            name: "version",
            type: "uint8",
          },
          {
            internalType: "uint256",
            name: "collateralCap",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "underlyingPrice",
            type: "uint256",
          },
          {
            internalType: "bool",
            name: "supplyPaused",
            type: "bool",
          },
          {
            internalType: "bool",
            name: "borrowPaused",
            type: "bool",
          },
          {
            internalType: "uint256",
            name: "supplyCap",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "borrowCap",
            type: "uint256",
          },
        ],
        internalType: "struct CompoundLens.CTokenMetadata[]",
        name: "",
        type: "tuple[]",
      },
    ],
    payable: false,
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    constant: false,
    inputs: [
      {
        internalType: "contract Comptroller",
        name: "comptroller",
        type: "address",
      },
      {
        internalType: "address",
        name: "account",
        type: "address",
      },
    ],
    name: "getAccountLimits",
    outputs: [
      {
        components: [
          {
            internalType: "contract CToken[]",
            name: "markets",
            type: "address[]",
          },
          {
            internalType: "uint256",
            name: "liquidity",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "shortfall",
            type: "uint256",
          },
        ],
        internalType: "struct CompoundLens.AccountLimits",
        name: "",
        type: "tuple",
      },
    ],
    payable: false,
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    constant: false,
    inputs: [
      {
        internalType: "contract CSLPInterface[]",
        name: "cTokens",
        type: "address[]",
      },
      {
        internalType: "address",
        name: "sushi",
        type: "address",
      },
      {
        internalType: "address",
        name: "account",
        type: "address",
      },
    ],
    name: "getClaimableSushiRewards",
    outputs: [
      {
        internalType: "uint256[]",
        name: "",
        type: "uint256[]",
      },
    ],
    payable: false,
    stateMutability: "nonpayable",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b506125dd806100206000396000f3fe608060405234801561001057600080fd5b50600436106100625760003560e01c80630972bf8b146100675780630e23cffd14610090578063158eca8b146100b05780634b70d84b146100d05780637dd8f6d9146100f0578063bdf950c914610110575b600080fd5b61007a610075366004611c32565b610130565b60405161008791906123c6565b60405180910390f35b6100a361009e366004611b87565b6101d3565b60405161008791906123e8565b6100c36100be366004611d1d565b6103e8565b6040516100879190612458565b6100e36100de366004611bf0565b6104ef565b60405161008791906123d7565b6101036100fe366004611d3b565b610786565b6040516100879190612438565b61012361011e366004611d3b565b6108c2565b6040516100879190612449565b6040805183815260208085028201019091526060908390829082801561017057816020015b61015d6118ff565b8152602001906001900390816101555790505b50905060005b828110156101c7576101a887878381811061018d57fe5b90506020020160206101a29190810190611d1d565b866108c2565b8282815181106101b457fe5b6020908102919091010152600101610176565b509150505b9392505050565b60408051848152602080860282010190915260609084908290828015610203578160200160208202803883390190505b50905060005b828110156103dd576040516370a0823160e01b81526000906001600160a01b038816906370a0823190610240908990600401612374565b60206040518083038186803b15801561025857600080fd5b505afa15801561026c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506102909190810190611d93565b905088888381811061029e57fe5b90506020020160206102b39190810190611d1d565b6001600160a01b0316632781e0d5876040518263ffffffff1660e01b81526004016102de9190612374565b602060405180830381600087803b1580156102f857600080fd5b505af115801561030c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506103309190810190611d93565b506040516370a0823160e01b81526000906001600160a01b038916906370a0823190610360908a90600401612374565b60206040518083038186803b15801561037857600080fd5b505afa15801561038c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506103b09190810190611d93565b90506103bc8183610d98565b8484815181106103c857fe5b60209081029190910101525050600101610209565b509695505050505050565b6103f0611956565b6000826001600160a01b0316635fe3b5676040518163ffffffff1660e01b815260040160206040518083038186803b15801561042b57600080fd5b505afa15801561043f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506104639190810190611d75565b90506000816001600160a01b0316637dc0d1d06040518163ffffffff1660e01b815260040160206040518083038186803b1580156104a057600080fd5b505afa1580156104b4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506104d89190810190611d75565b90506104e5848383610dd2565b925050505b919050565b606081806105185760405162461bcd60e51b815260040161050f90612428565b60405180910390fd5b60608160405190808252806020026020018201604052801561055457816020015b610541611956565b8152602001906001900390816105395790505b50905060008585600081811061056657fe5b905060200201602061057b9190810190611d1d565b6001600160a01b0316635fe3b5676040518163ffffffff1660e01b815260040160206040518083038186803b1580156105b357600080fd5b505afa1580156105c7573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506105eb9190810190611d75565b90506000816001600160a01b0316637dc0d1d06040518163ffffffff1660e01b815260040160206040518083038186803b15801561062857600080fd5b505afa15801561063c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506106609190810190611d75565b905060005b848110156107785787878281811061067957fe5b905060200201602061068e9190810190611d1d565b6001600160a01b0316635fe3b5676040518163ffffffff1660e01b815260040160206040518083038186803b1580156106c657600080fd5b505afa1580156106da573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506106fe9190810190611d75565b6001600160a01b0316836001600160a01b03161461072e5760405162461bcd60e51b815260040161050f90612418565b61075988888381811061073d57fe5b90506020020160206107529190810190611d1d565b8484610dd2565b84828151811061076557fe5b6020908102919091010152600101610665565b509193505050505b92915050565b61078e611a20565b6000806000856001600160a01b0316635ec88c79866040518263ffffffff1660e01b81526004016107bf9190612374565b60606040518083038186803b1580156107d757600080fd5b505afa1580156107eb573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525061080f9190810190611db1565b9250925092508260001461082257600080fd5b604080516060810191829052632aff3bff60e21b909152806001600160a01b03881663abfceffc6108568960648501612374565b60006040518083038186803b15801561086e57600080fd5b505afa158015610882573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526108aa9190810190611c87565b81526020810193909352604090920152949350505050565b6108ca6118ff565b6000836001600160a01b0316635fe3b5676040518163ffffffff1660e01b815260040160206040518083038186803b15801561090557600080fd5b505afa158015610919573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525061093d9190810190611d75565b90506000816001600160a01b031663929fe9a185876040518363ffffffff1660e01b815260040161096f9291906123ab565b60206040518083038186803b15801561098757600080fd5b505afa15801561099b573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506109bf9190810190611cbc565b90506000808690506000816001600160a01b0316636f307dc36040518163ffffffff1660e01b815260040160206040518083038186803b158015610a0257600080fd5b505afa158015610a16573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250610a3a9190810190611b61565b90506000816001600160a01b03166370a08231896040518263ffffffff1660e01b8152600401610a6a9190612382565b60206040518083038186803b158015610a8257600080fd5b505afa158015610a96573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250610aba9190810190611d93565b90506000826001600160a01b031663dd62ed3e8a8c6040518363ffffffff1660e01b8152600401610aec929190612390565b60206040518083038186803b158015610b0457600080fd5b505afa158015610b18573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250610b3c9190810190611d93565b90508515610bc7576040516361bfb47160e11b81526001600160a01b038b169063c37f68e290610b70908c90600401612382565b60806040518083038186803b158015610b8857600080fd5b505afa158015610b9c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250610bc09190810190611df4565b5090965050505b60408051610120810182526001600160a01b038c1680825291516370a0823160e01b8152909160208301916370a0823190610c06908e90600401612382565b60206040518083038186803b158015610c1e57600080fd5b505afa158015610c32573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250610c569190810190611d93565b81526020018b6001600160a01b03166317bfdfbc8c6040518263ffffffff1660e01b8152600401610c879190612382565b602060405180830381600087803b158015610ca157600080fd5b505af1158015610cb5573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250610cd99190810190611d93565b81526020018b6001600160a01b0316633af9e6698c6040518263ffffffff1660e01b8152600401610d0a9190612382565b602060405180830381600087803b158015610d2457600080fd5b505af1158015610d38573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250610d5c9190810190611d93565b815260200183815260200182815260200187151581526020018681526020018a6001600160a01b03163181525097505050505050505092915050565b60006101cc8383604051806040016040528060158152602001747375627472616374696f6e20756e646572666c6f7760581b8152506118d3565b610dda611956565b6000846001600160a01b031663bd6d894d6040518163ffffffff1660e01b8152600401602060405180830381600087803b158015610e1757600080fd5b505af1158015610e2b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250610e4f9190810190611d93565b90506000806000866001600160a01b0316638e8f294b896040518263ffffffff1660e01b8152600401610e829190612374565b60606040518083038186803b158015610e9a57600080fd5b505afa158015610eae573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250610ed29190810190611cda565b91945092509050876000806001846002811115610eeb57fe5b1415610fdc578a6001600160a01b031663d2bb18e96040518163ffffffff1660e01b815260040160206040518083038186803b158015610f2a57600080fd5b505afa158015610f3e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250610f629190810190611d93565b91508a6001600160a01b03166319a4dd3c6040518163ffffffff1660e01b815260040160206040518083038186803b158015610f9d57600080fd5b505afa158015610fb1573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250610fd59190810190611d93565b90506110d7565b6002846002811115610fea57fe5b14156110d7578a6001600160a01b031663d2bb18e96040518163ffffffff1660e01b815260040160206040518083038186803b15801561102957600080fd5b505afa15801561103d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506110619190810190611d93565b91508a6001600160a01b03166319a4dd3c6040518163ffffffff1660e01b815260040160206040518083038186803b15801561109c57600080fd5b505afa1580156110b0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506110d49190810190611d93565b90505b604051806102c001604052808c6001600160a01b031681526020018881526020018c6001600160a01b031663ae9d70b06040518163ffffffff1660e01b815260040160206040518083038186803b15801561113157600080fd5b505afa158015611145573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506111699190810190611d93565b81526020018c6001600160a01b031663f8f9da286040518163ffffffff1660e01b815260040160206040518083038186803b1580156111a757600080fd5b505afa1580156111bb573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506111df9190810190611d93565b81526020018c6001600160a01b031663173b99046040518163ffffffff1660e01b815260040160206040518083038186803b15801561121d57600080fd5b505afa158015611231573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506112559190810190611d93565b81526020018c6001600160a01b03166347bd37186040518163ffffffff1660e01b815260040160206040518083038186803b15801561129357600080fd5b505afa1580156112a7573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506112cb9190810190611d93565b81526020018c6001600160a01b0316638f840ddd6040518163ffffffff1660e01b815260040160206040518083038186803b15801561130957600080fd5b505afa15801561131d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506113419190810190611d93565b81526020018c6001600160a01b03166318160ddd6040518163ffffffff1660e01b815260040160206040518083038186803b15801561137f57600080fd5b505afa158015611393573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506113b79190810190611d93565b81526020018c6001600160a01b0316633b1d21a26040518163ffffffff1660e01b815260040160206040518083038186803b1580156113f557600080fd5b505afa158015611409573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525061142d9190810190611d93565b81526020018281526020018715158152602001868152602001846001600160a01b0316636f307dc36040518163ffffffff1660e01b815260040160206040518083038186803b15801561147f57600080fd5b505afa158015611493573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506114b79190810190611b61565b6001600160a01b031681526020018c6001600160a01b031663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b1580156114fe57600080fd5b505afa158015611512573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506115369190810190611e49565b60ff168152602001846001600160a01b0316636f307dc36040518163ffffffff1660e01b815260040160206040518083038186803b15801561157757600080fd5b505afa15801561158b573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506115af9190810190611b61565b6001600160a01b031663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b1580156115e757600080fd5b505afa1580156115fb573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525061161f9190810190611e49565b60ff16815260200185600281111561163357fe5b81526020018381526020018a6001600160a01b031663fc57d4df8e6040518263ffffffff1660e01b815260040161166a91906123f9565b60206040518083038186803b15801561168257600080fd5b505afa158015611696573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506116ba9190810190611d93565b81526020018b6001600160a01b031663731f0c2b8e6040518263ffffffff1660e01b81526004016116eb9190612374565b60206040518083038186803b15801561170357600080fd5b505afa158015611717573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525061173b9190810190611cbc565b151581526020018b6001600160a01b0316636d154ea58e6040518263ffffffff1660e01b815260040161176e9190612374565b60206040518083038186803b15801561178657600080fd5b505afa15801561179a573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506117be9190810190611cbc565b151581526020018b6001600160a01b03166302c3bcbb8e6040518263ffffffff1660e01b81526004016117f19190612374565b60206040518083038186803b15801561180957600080fd5b505afa15801561181d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506118419190810190611d93565b81526020018b6001600160a01b0316634a5844328e6040518263ffffffff1660e01b81526004016118729190612374565b60206040518083038186803b15801561188a57600080fd5b505afa15801561189e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506118c29190810190611d93565b90529b9a5050505050505050505050565b600081848411156118f75760405162461bcd60e51b815260040161050f9190612407565b505050900390565b60405180610120016040528060006001600160a01b03168152602001600081526020016000815260200160008152602001600081526020016000815260200160001515815260200160008152602001600081525090565b604051806102c0016040528060006001600160a01b031681526020016000815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081526020016000151581526020016000815260200160006001600160a01b031681526020016000815260200160008152602001600060028111156119ec57fe5b8152602001600081526020016000815260200160001515815260200160001515815260200160008152602001600081525090565b60405180606001604052806060815260200160008152602001600081525090565b803561078081612555565b805161078081612555565b60008083601f840112611a6957600080fd5b50813567ffffffffffffffff811115611a8157600080fd5b602083019150836020820283011115611a9957600080fd5b9250929050565b600082601f830112611ab157600080fd5b8151611ac4611abf8261248e565b612467565b91508181835260208401935060208101905083856020840282011115611ae957600080fd5b60005b83811015611b155781611aff8882611b35565b8452506020928301929190910190600101611aec565b5050505092915050565b805161078081612569565b803561078081612572565b805161078081612572565b80516107808161257b565b805161078081612588565b805161078081612591565b600060208284031215611b7357600080fd5b6000611b7f8484611a4c565b949350505050565b60008060008060608587031215611b9d57600080fd5b843567ffffffffffffffff811115611bb457600080fd5b611bc087828801611a57565b94509450506020611bd387828801611a41565b9250506040611be487828801611a41565b91505092959194509250565b60008060208385031215611c0357600080fd5b823567ffffffffffffffff811115611c1a57600080fd5b611c2685828601611a57565b92509250509250929050565b600080600060408486031215611c4757600080fd5b833567ffffffffffffffff811115611c5e57600080fd5b611c6a86828701611a57565b93509350506020611c7d86828701611a41565b9150509250925092565b600060208284031215611c9957600080fd5b815167ffffffffffffffff811115611cb057600080fd5b611b7f84828501611aa0565b600060208284031215611cce57600080fd5b6000611b7f8484611b1f565b600080600060608486031215611cef57600080fd5b6000611cfb8686611b1f565b9350506020611d0c86828701611b4b565b9250506040611c7d86828701611b40565b600060208284031215611d2f57600080fd5b6000611b7f8484611b2a565b60008060408385031215611d4e57600080fd5b6000611d5a8585611b2a565b9250506020611d6b85828601611a41565b9150509250929050565b600060208284031215611d8757600080fd5b6000611b7f8484611b35565b600060208284031215611da557600080fd5b6000611b7f8484611b4b565b600080600060608486031215611dc657600080fd5b6000611dd28686611b4b565b9350506020611de386828701611b4b565b9250506040611c7d86828701611b4b565b60008060008060808587031215611e0a57600080fd5b6000611e168787611b4b565b9450506020611e2787828801611b4b565b9350506040611e3887828801611b4b565b9250506060611be487828801611b4b565b600060208284031215611e5b57600080fd5b6000611b7f8484611b56565b6000611e738383612015565b505060200190565b6000611e878383612100565b50506101200190565b6000611e9c83836121b2565b50506102c00190565b6000611e73838361236b565b611eba816124fc565b82525050565b611eba816124c2565b6000611ed4826124b5565b611ede81856124b9565b9350611ee9836124af565b8060005b83811015611f17578151611f018882611e67565b9750611f0c836124af565b925050600101611eed565b509495945050505050565b6000611f2d826124b5565b611f3781856124b9565b9350611f42836124af565b8060005b83811015611f17578151611f5a8882611e7b565b9750611f65836124af565b925050600101611f46565b6000611f7b826124b5565b611f8581856124b9565b9350611f90836124af565b8060005b83811015611f17578151611fa88882611e90565b9750611fb3836124af565b925050600101611f94565b6000611fc9826124b5565b611fd381856124b9565b9350611fde836124af565b8060005b83811015611f17578151611ff68882611ea5565b9750612001836124af565b925050600101611fe2565b611eba816124cd565b611eba816124d2565b611eba81612507565b6000612032826124b5565b61203c81856124b9565b935061204c818560208601612512565b6120558161253e565b9093019392505050565b600061206c6014836124b9565b7336b4b9b6b0ba31b41031b7b6b83a3937b63632b960611b815260200192915050565b600061209c600d836124b9565b6c1a5b9d985b1a59081a5b9c1d5d609a1b815260200192915050565b80516060808452600091908401906120d08282611ec9565b91505060208301516120e5602086018261236b565b5060408301516120f8604086018261236b565b509392505050565b80516101208301906121128482611ec0565b506020820151612125602085018261236b565b506040820151612138604085018261236b565b50606082015161214b606085018261236b565b50608082015161215e608085018261236b565b5060a082015161217160a085018261236b565b5060c082015161218460c085018261200c565b5060e082015161219760e085018261236b565b506101008201516121ac61010085018261236b565b50505050565b80516102c08301906121c48482611ec0565b5060208201516121d7602085018261236b565b5060408201516121ea604085018261236b565b5060608201516121fd606085018261236b565b506080820151612210608085018261236b565b5060a082015161222360a085018261236b565b5060c082015161223660c085018261236b565b5060e082015161224960e085018261236b565b5061010082015161225e61010085018261236b565b5061012082015161227361012085018261236b565b5061014082015161228861014085018261200c565b5061016082015161229d61016085018261236b565b506101808201516122b2610180850182611ec0565b506101a08201516122c76101a085018261236b565b506101c08201516122dc6101c085018261236b565b506101e08201516122f16101e085018261201e565b5061020082015161230661020085018261236b565b5061022082015161231b61022085018261236b565b5061024082015161233061024085018261200c565b5061026082015161234561026085018261200c565b5061028082015161235a61028085018261236b565b506102a08201516121ac6102a08501825b611eba816124f3565b602081016107808284611ec0565b602081016107808284611eb1565b6040810161239e8285611eb1565b6101cc6020830184611ec0565b604081016123b98285611eb1565b6101cc6020830184612015565b602080825281016101cc8184611f22565b602080825281016101cc8184611f70565b602080825281016101cc8184611fbe565b602081016107808284612015565b602080825281016101cc8184612027565b602080825281016107808161205f565b602080825281016107808161208f565b602080825281016101cc81846120b8565b61012081016107808284612100565b6102c0810161078082846121b2565b60405181810167ffffffffffffffff8111828210171561248657600080fd5b604052919050565b600067ffffffffffffffff8211156124a557600080fd5b5060209081020190565b60200190565b5190565b90815260200190565b6000610780826124e7565b151590565b6000610780826124c2565b806104ea81612548565b6001600160a01b031690565b90565b60ff1690565b6000610780826124d2565b6000610780826124dd565b60005b8381101561252d578181015183820152602001612515565b838111156121ac5750506000910152565b601f01601f191690565b6003811061255257fe5b50565b61255e816124c2565b811461255257600080fd5b61255e816124cd565b61255e816124d2565b6003811061255257600080fd5b61255e816124f3565b61255e816124f656fea365627a7a72315820a4f9e222f7e79f8c756a83c98431795d86d20dd78191963376b5a541401c1fab6c6578706572696d656e74616cf564736f6c63430005110040";

type CompoundLensConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: CompoundLensConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class CompoundLens__factory extends ContractFactory {
  constructor(...args: CompoundLensConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<CompoundLens> {
    return super.deploy(overrides || {}) as Promise<CompoundLens>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): CompoundLens {
    return super.attach(address) as CompoundLens;
  }
  override connect(signer: Signer): CompoundLens__factory {
    return super.connect(signer) as CompoundLens__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): CompoundLensInterface {
    return new utils.Interface(_abi) as CompoundLensInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): CompoundLens {
    return new Contract(address, _abi, signerOrProvider) as CompoundLens;
  }
}
