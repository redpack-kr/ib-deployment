/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../../common";
import type {
  MockNonStandardRewardToken,
  MockNonStandardRewardTokenInterface,
} from "../../../../contracts/liquidity-mining/mocks/MockNonStandardRewardToken";

const _abi = [
  {
    inputs: [],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "owner",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "spender",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "value",
        type: "uint256",
      },
    ],
    name: "Approval",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "from",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "value",
        type: "uint256",
      },
    ],
    name: "Transfer",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    name: "allowance",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_spender",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "approve",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    name: "balanceOf",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "decimals",
    outputs: [
      {
        internalType: "uint8",
        name: "",
        type: "uint8",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "name",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "symbol",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "totalSupply",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "dst",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "transfer",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "src",
        type: "address",
      },
      {
        internalType: "address",
        name: "dst",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "transferFrom",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b5069021e19e0c9bab240000060038190553360009081526005602090815260408083209390935582518084019093526007808452664d6f636b204e5360c81b93909101928352610060929061009b565b50604080518082019091526002808252614e5360f01b6020909201918252610088918161009b565b506001805460ff1916601217905561016f565b8280546100a790610134565b90600052602060002090601f0160209004810192826100c9576000855561010f565b82601f106100e257805160ff191683800117855561010f565b8280016001018555821561010f579182015b8281111561010f5782518255916020019190600101906100f4565b5061011b92915061011f565b5090565b5b8082111561011b5760008155600101610120565b600181811c9082168061014857607f821691505b6020821081141561016957634e487b7160e01b600052602260045260246000fd5b50919050565b6106148061017e6000396000f3fe608060405234801561001057600080fd5b50600436106100935760003560e01c8063313ce56711610066578063313ce5671461010557806370a082311461012457806395d89b4114610144578063a9059cbb1461014c578063dd62ed3e1461015f57600080fd5b806306fdde0314610098578063095ea7b3146100b657806318160ddd146100d957806323b872dd146100f0575b600080fd5b6100a061018a565b6040516100ad9190610432565b60405180910390f35b6100c96100c43660046104a3565b610218565b60405190151581526020016100ad565b6100e260035481565b6040519081526020016100ad565b6101036100fe3660046104cd565b610284565b005b6001546101129060ff1681565b60405160ff90911681526020016100ad565b6100e2610132366004610509565b60056020526000908152604090205481565b6100a0610380565b61010361015a3660046104a3565b61038d565b6100e261016d36600461052b565b600460209081526000928352604080842090915290825290205481565b600080546101979061055e565b80601f01602080910402602001604051908101604052809291908181526020018280546101c39061055e565b80156102105780601f106101e557610100808354040283529160200191610210565b820191906000526020600020905b8154815290600101906020018083116101f357829003601f168201915b505050505081565b3360008181526004602090815260408083206001600160a01b038716808552925280832085905551919290917f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925906102739086815260200190565b60405180910390a350600192915050565b6001600160a01b03831660009081526004602090815260408083203384529091529020546102b39082906105af565b6001600160a01b0384166000818152600460209081526040808320338452825280832094909455918152600590915220546102ef9082906105af565b6001600160a01b03808516600090815260056020526040808220939093559084168152205461031f9082906105c6565b6001600160a01b0380841660008181526005602052604090819020939093559151908516907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef906103739085815260200190565b60405180910390a3505050565b600280546101979061055e565b336000908152600560205260409020546103a89082906105af565b33600090815260056020526040808220929092556001600160a01b038416815220546103d59082906105c6565b6001600160a01b0383166000818152600560205260409081902092909255905133907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef906104269085815260200190565b60405180910390a35050565b600060208083528351808285015260005b8181101561045f57858101830151858201604001528201610443565b81811115610471576000604083870101525b50601f01601f1916929092016040019392505050565b80356001600160a01b038116811461049e57600080fd5b919050565b600080604083850312156104b657600080fd5b6104bf83610487565b946020939093013593505050565b6000806000606084860312156104e257600080fd5b6104eb84610487565b92506104f960208501610487565b9150604084013590509250925092565b60006020828403121561051b57600080fd5b61052482610487565b9392505050565b6000806040838503121561053e57600080fd5b61054783610487565b915061055560208401610487565b90509250929050565b600181811c9082168061057257607f821691505b6020821081141561059357634e487b7160e01b600052602260045260246000fd5b50919050565b634e487b7160e01b600052601160045260246000fd5b6000828210156105c1576105c1610599565b500390565b600082198211156105d9576105d9610599565b50019056fea26469706673582212202c1d948b436e4f7661bce0876ff748bbcaf26d55d30df2357d066ad50b55369164736f6c634300080b0033";

type MockNonStandardRewardTokenConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: MockNonStandardRewardTokenConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class MockNonStandardRewardToken__factory extends ContractFactory {
  constructor(...args: MockNonStandardRewardTokenConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<MockNonStandardRewardToken> {
    return super.deploy(overrides || {}) as Promise<MockNonStandardRewardToken>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): MockNonStandardRewardToken {
    return super.attach(address) as MockNonStandardRewardToken;
  }
  override connect(signer: Signer): MockNonStandardRewardToken__factory {
    return super.connect(signer) as MockNonStandardRewardToken__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): MockNonStandardRewardTokenInterface {
    return new utils.Interface(_abi) as MockNonStandardRewardTokenInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): MockNonStandardRewardToken {
    return new Contract(
      address,
      _abi,
      signerOrProvider
    ) as MockNonStandardRewardToken;
  }
}
