/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../../common";
import type {
  MockComptroller,
  MockComptrollerInterface,
} from "../../../../contracts/liquidity-mining/mocks/MockComptroller";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "market",
        type: "address",
      },
    ],
    name: "addMarket",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "account",
        type: "address",
      },
    ],
    name: "getAccountLiquidity",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getAllMarkets",
    outputs: [
      {
        internalType: "address[]",
        name: "",
        type: "address[]",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "market",
        type: "address",
      },
    ],
    name: "markets",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "account",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "error",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "shortfall",
        type: "uint256",
      },
    ],
    name: "setAccountLiquidity",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "liquidityMining",
        type: "address",
      },
    ],
    name: "setLiquidityMining",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b5061035c806100206000396000f3fe608060405234801561001057600080fd5b50600436106100625760003560e01c80630859183514610067578063206878a4146100b05780635ec88c79146100e05780638e8f294b1461013157806393e306331461017c578063b0772d0b146101f1575b600080fd5b6100ae610075366004610284565b60408051808201825292835260208084019283526001600160a01b03909416600090815293849052909220905181559051600190910155565b005b6100ae6100be3660046102b7565b600380546001600160a01b0319166001600160a01b0392909216919091179055565b6101116100ee3660046102b7565b6001600160a01b0316600090815260208190526040812080546001909101549092565b604080519384526020840192909252908201526060015b60405180910390f35b61015f61013f3660046102b7565b6001600160a01b031660009081526001602052604081205460ff16918190565b604080519315158452602084019290925290820152606001610128565b6100ae61018a3660046102b7565b6002805460018181019092557f405787fa12a823e0f2b7631cc41b3ba8828b3321ca811111fa75cd3aa3bb5ace0180546001600160a01b039093166001600160a01b031990931683179055600091825260208190526040909120805460ff19169091179055565b6101f9610206565b60405161012891906102d9565b6060600280548060200260200160405190810160405280929190818152602001828054801561025e57602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311610240575b5050505050905090565b80356001600160a01b038116811461027f57600080fd5b919050565b60008060006060848603121561029957600080fd5b6102a284610268565b95602085013595506040909401359392505050565b6000602082840312156102c957600080fd5b6102d282610268565b9392505050565b6020808252825182820181905260009190848201906040850190845b8181101561031a5783516001600160a01b0316835292840192918401916001016102f5565b5090969550505050505056fea264697066735822122015208151f903ad8223aae87884c805022fef560556ff60a7e297f9795324119964736f6c634300080b0033";

type MockComptrollerConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: MockComptrollerConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class MockComptroller__factory extends ContractFactory {
  constructor(...args: MockComptrollerConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<MockComptroller> {
    return super.deploy(overrides || {}) as Promise<MockComptroller>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): MockComptroller {
    return super.attach(address) as MockComptroller;
  }
  override connect(signer: Signer): MockComptroller__factory {
    return super.connect(signer) as MockComptroller__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): MockComptrollerInterface {
    return new utils.Interface(_abi) as MockComptrollerInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): MockComptroller {
    return new Contract(address, _abi, signerOrProvider) as MockComptroller;
  }
}
