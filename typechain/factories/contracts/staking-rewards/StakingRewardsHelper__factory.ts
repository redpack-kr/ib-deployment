/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../common";
import type {
  StakingRewardsHelper,
  StakingRewardsHelperInterface,
} from "../../../contracts/staking-rewards/StakingRewardsHelper";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "_factory",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "previousOwner",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "OwnershipTransferred",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "address",
        name: "token",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "TokenSeized",
    type: "event",
  },
  {
    inputs: [],
    name: "claimAllRewards",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address[]",
        name: "stakingRewards",
        type: "address[]",
      },
    ],
    name: "claimRewards",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address[]",
        name: "stakingRewards",
        type: "address[]",
      },
    ],
    name: "exit",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "exitAll",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "factory",
    outputs: [
      {
        internalType: "contract StakingRewardsFactoryInterface",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "rewardToken",
        type: "address",
      },
    ],
    name: "getRewardTokenInfo",
    outputs: [
      {
        components: [
          {
            internalType: "address",
            name: "rewardTokenAddress",
            type: "address",
          },
          {
            internalType: "string",
            name: "rewardTokenSymbol",
            type: "string",
          },
          {
            internalType: "uint8",
            name: "rewardTokenDecimals",
            type: "uint8",
          },
        ],
        internalType: "struct StakingRewardsHelper.RewardTokenInfo",
        name: "",
        type: "tuple",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getStakingInfo",
    outputs: [
      {
        components: [
          {
            internalType: "address",
            name: "stakingTokenAddress",
            type: "address",
          },
          {
            internalType: "uint256",
            name: "totalSupply",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "supplyRatePerBlock",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "exchangeRate",
            type: "uint256",
          },
          {
            components: [
              {
                internalType: "address",
                name: "rewardTokenAddress",
                type: "address",
              },
              {
                internalType: "uint256",
                name: "rate",
                type: "uint256",
              },
            ],
            internalType: "struct StakingRewardsHelper.RewardRate[]",
            name: "rewardRates",
            type: "tuple[]",
          },
        ],
        internalType: "struct StakingRewardsHelper.StakingInfo[]",
        name: "",
        type: "tuple[]",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "account",
        type: "address",
      },
      {
        internalType: "address[]",
        name: "rewardTokens",
        type: "address[]",
      },
    ],
    name: "getUserClaimableRewards",
    outputs: [
      {
        components: [
          {
            components: [
              {
                internalType: "address",
                name: "rewardTokenAddress",
                type: "address",
              },
              {
                internalType: "string",
                name: "rewardTokenSymbol",
                type: "string",
              },
              {
                internalType: "uint8",
                name: "rewardTokenDecimals",
                type: "uint8",
              },
            ],
            internalType: "struct StakingRewardsHelper.RewardTokenInfo",
            name: "rewardToken",
            type: "tuple",
          },
          {
            internalType: "uint256",
            name: "amount",
            type: "uint256",
          },
        ],
        internalType: "struct StakingRewardsHelper.RewardClaimable[]",
        name: "",
        type: "tuple[]",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "account",
        type: "address",
      },
    ],
    name: "getUserStaked",
    outputs: [
      {
        components: [
          {
            internalType: "address",
            name: "stakingTokenAddress",
            type: "address",
          },
          {
            internalType: "uint256",
            name: "balance",
            type: "uint256",
          },
        ],
        internalType: "struct StakingRewardsHelper.UserStaked[]",
        name: "",
        type: "tuple[]",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "owner",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "renounceOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "token",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "seize",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "underlying",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "stake",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "transferOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "stakingRewards",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "unstake",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
];

const _bytecode =
  "0x60a06040523480156200001157600080fd5b50604051620025b5380380620025b58339810160408190526200003491620000a1565b6200003f3362000051565b6001600160a01b0316608052620000d3565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b600060208284031215620000b457600080fd5b81516001600160a01b0381168114620000cc57600080fd5b9392505050565b608051612495620001206000396000818161019e01528181610250015281816102e601528181610417015281816104f5015281816109d101528181611306015261150b01526124956000f3fe608060405234801561001057600080fd5b50600436106100f55760003560e01c8063c2a672e011610097578063eb9253c011610066578063eb9253c014610200578063f2fde38b14610213578063f6670bd614610226578063f9f031df1461023957600080fd5b8063c2a672e014610186578063c45a015514610199578063d3e64cab146101c0578063dac3fc3f146101e057600080fd5b80638da5cb5b116100d35780638da5cb5b14610114578063adc9772e1461013e578063b2989f5d14610151578063b40cd21d1461017157600080fd5b80630b83a727146100fa5780635b6c508c14610104578063715018a61461010c575b600080fd5b61010261024c565b005b6101026102e2565b610102610375565b6000546001600160a01b03165b6040516001600160a01b0390911681526020015b60405180910390f35b61010261014c366004611db8565b6103b4565b61016461015f366004611de4565b6108a9565b6040516101359190611e97565b6101796109cb565b6040516101359190611eaa565b610102610194366004611db8565b610ece565b6101217f000000000000000000000000000000000000000000000000000000000000000081565b6101d36101ce366004611f8b565b611288565b6040516101359190612013565b6101f36101ee366004611de4565b611505565b6040516101359190612089565b61010261020e366004611db8565b61174e565b610102610221366004611de4565b6117e4565b610102610234366004612154565b61187c565b610102610247366004612154565b6119c4565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663918e4c0d6040518163ffffffff1660e01b8152600401600060405180830381865afa1580156102ac573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526102d491908101906121e8565b90506102df816119c4565b50565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663918e4c0d6040518163ffffffff1660e01b8152600401600060405180830381865afa158015610342573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261036a91908101906121e8565b90506102df8161187c565b6000546001600160a01b031633146103a85760405162461bcd60e51b815260040161039f90612277565b60405180910390fd5b6103b26000611a5a565b565b600081116103f55760405162461bcd60e51b815260206004820152600e60248201526d1a5b9d985b1a5908185b5bdd5b9d60921b604482015260640161039f565b604051630a69c70f60e21b81526001600160a01b0383811660048301526000917f0000000000000000000000000000000000000000000000000000000000000000909116906329a71c3c90602401602060405180830381865afa158015610460573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061048491906122ac565b90506001600160a01b0381166104d45760405162461bcd60e51b815260206004820152601560248201527434b73b30b634b21039ba30b5b4b733903a37b5b2b760591b604482015260640161039f565b6040516210f7f160e91b81526001600160a01b0382811660048301526000917f0000000000000000000000000000000000000000000000000000000000000000909116906321efe20090602401602060405180830381865afa15801561053e573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061056291906122ac565b90506001600160a01b0381166105ba5760405162461bcd60e51b815260206004820152601960248201527f7374616b696e672072657761726473206e6f7420657869737400000000000000604482015260640161039f565b6105cf6001600160a01b038516333086611aaa565b60405163095ea7b360e01b81526001600160a01b0383811660048301526024820185905285169063095ea7b3906044016020604051808303816000875af115801561061e573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061064291906122c9565b5060405163140e25ad60e31b8152600481018490526001600160a01b0383169063a0712d68906024016020604051808303816000875af115801561068a573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106ae91906122eb565b156106e95760405162461bcd60e51b815260206004820152600b60248201526a1b5a5b9d0819985a5b195960aa1b604482015260640161039f565b6040516370a0823160e01b81523060048201526000906001600160a01b038416906370a0823190602401602060405180830381865afa158015610730573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061075491906122eb565b60405163095ea7b360e01b81526001600160a01b038481166004830152602482018390529192509084169063095ea7b3906044016020604051808303816000875af11580156107a7573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107cb91906122c9565b506040516305dc812160e31b8152336004820152602481018290526001600160a01b03831690632ee4090890604401600060405180830381600087803b15801561081457600080fd5b505af1158015610828573d6000803e3d6000fd5b50506040516370a0823160e01b81523060048201526001600160a01b03861692506370a0823191506024015b602060405180830381865afa158015610871573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061089591906122eb565b156108a2576108a2612304565b5050505050565b6108d9604051806060016040528060006001600160a01b0316815260200160608152602001600060ff1681525090565b6040518060600160405280836001600160a01b03168152602001836001600160a01b03166395d89b416040518163ffffffff1660e01b8152600401600060405180830381865afa158015610931573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610959919081019061231a565b8152602001836001600160a01b031663313ce5676040518163ffffffff1660e01b8152600401602060405180830381865afa15801561099c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109c091906123ae565b60ff16905292915050565b606060007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663918e4c0d6040518163ffffffff1660e01b8152600401600060405180830381865afa158015610a2d573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610a5591908101906121e8565b90506000815167ffffffffffffffff811115610a7357610a736120e9565b604051908082528060200260200182016040528015610adf57816020015b610acc6040518060a0016040528060006001600160a01b03168152602001600081526020016000815260200160008152602001606081525090565b815260200190600190039081610a915790505b50905060005b8251811015610ec7576000838281518110610b0257610b026123d1565b602002602001015190506000816001600160a01b0316638040c65b6040518163ffffffff1660e01b8152600401600060405180830381865afa158015610b4c573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610b7491908101906121e8565b90506000815167ffffffffffffffff811115610b9257610b926120e9565b604051908082528060200260200182016040528015610bd757816020015b6040805180820190915260008082526020820152815260200190600190039081610bb05790505b50905060005b8251811015610cc7576000838281518110610bfa57610bfa6123d1565b602090810291909101015160405163ea7cbff160e01b81526001600160a01b03808316600483015291925060009187169063ea7cbff190602401602060405180830381865afa158015610c51573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c7591906122eb565b90506040518060400160405280836001600160a01b0316815260200182815250848481518110610ca757610ca76123d1565b602002602001018190525050508080610cbf906123fd565b915050610bdd565b506000836001600160a01b0316639f9106d16040518163ffffffff1660e01b8152600401602060405180830381865afa158015610d08573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d2c91906122ac565b90506000846001600160a01b03166318160ddd6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610d6e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d9291906122eb565b90506000826001600160a01b031663ae9d70b06040518163ffffffff1660e01b8152600401602060405180830381865afa158015610dd4573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610df891906122eb565b90506000836001600160a01b031663182df0f56040518163ffffffff1660e01b8152600401602060405180830381865afa158015610e3a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e5e91906122eb565b90506040518060a00160405280856001600160a01b0316815260200184815260200183815260200182815260200186815250898981518110610ea257610ea26123d1565b6020026020010181905250505050505050508080610ebf906123fd565b915050610ae5565b5092915050565b60008111610f0f5760405162461bcd60e51b815260206004820152600e60248201526d1a5b9d985b1a5908185b5bdd5b9d60921b604482015260640161039f565b6000826001600160a01b0316639f9106d16040518163ffffffff1660e01b8152600401602060405180830381865afa158015610f4f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f7391906122ac565b90506001600160a01b038116610fc35760405162461bcd60e51b815260206004820152601560248201527434b73b30b634b21039ba30b5b4b733903a37b5b2b760591b604482015260640161039f565b6000816001600160a01b0316636f307dc36040518163ffffffff1660e01b8152600401602060405180830381865afa158015611003573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061102791906122ac565b90506001600160a01b0381166110745760405162461bcd60e51b8152602060048201526012602482015271696e76616c696420756e6465726c79696e6760701b604482015260640161039f565b604051636da8c6d960e11b8152336004820152602481018490526001600160a01b0385169063db518db290604401600060405180830381600087803b1580156110bc57600080fd5b505af11580156110d0573d6000803e3d6000fd5b505060405163db006a7560e01b8152600481018690526001600160a01b038516925063db006a7591506024016020604051808303816000875af115801561111b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061113f91906122eb565b1561117c5760405162461bcd60e51b815260206004820152600d60248201526c1c995919595b4819985a5b1959609a1b604482015260640161039f565b6040516370a0823160e01b81523060048201526000906001600160a01b038316906370a0823190602401602060405180830381865afa1580156111c3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111e791906122eb565b60405163a9059cbb60e01b8152336004820152602481018290529091506001600160a01b0383169063a9059cbb906044016020604051808303816000875af1158015611237573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061125b91906122c9565b506040516370a0823160e01b81523060048201526001600160a01b038316906370a0823190602401610854565b606060008267ffffffffffffffff8111156112a5576112a56120e9565b6040519080825280602002602001820160405280156112ff57816020015b6040805160a081018252600091810182815260608083015260808201839052815260208101919091528152602001906001900390816112c35790505b50905060007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663918e4c0d6040518163ffffffff1660e01b8152600401600060405180830381865afa158015611362573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261138a91908101906121e8565b905060005b848110156114f8576000805b83518110156114885760008482815181106113b8576113b86123d1565b60200260200101519050806001600160a01b031663211dc32d8a8a878181106113e3576113e36123d1565b90506020020160208101906113f89190611de4565b6040516001600160e01b031960e084901b1681526001600160a01b039182166004820152908d166024820152604401602060405180830381865afa158015611444573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061146891906122eb565b6114729084612418565b9250508080611480906123fd565b91505061139b565b5060405180604001604052806114be8989868181106114a9576114a96123d1565b905060200201602081019061015f9190611de4565b8152602001828152508483815181106114d9576114d96123d1565b60200260200101819052505080806114f0906123fd565b91505061138f565b50909150505b9392505050565b606060007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663918e4c0d6040518163ffffffff1660e01b8152600401600060405180830381865afa158015611567573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261158f91908101906121e8565b90506000815167ffffffffffffffff8111156115ad576115ad6120e9565b6040519080825280602002602001820160405280156115f257816020015b60408051808201909152600080825260208201528152602001906001900390816115cb5790505b50905060005b8251811015611746576000838281518110611615576116156123d1565b602002602001015190506000816001600160a01b0316639f9106d16040518163ffffffff1660e01b8152600401602060405180830381865afa15801561165f573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061168391906122ac565b6040516370a0823160e01b81526001600160a01b0389811660048301529192506000918416906370a0823190602401602060405180830381865afa1580156116cf573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116f391906122eb565b90506040518060400160405280836001600160a01b0316815260200182815250858581518110611725576117256123d1565b6020026020010181905250505050808061173e906123fd565b9150506115f8565b509392505050565b6000546001600160a01b031633146117785760405162461bcd60e51b815260040161039f90612277565b61179e61178d6000546001600160a01b031690565b6001600160a01b0384169083611b1b565b604080516001600160a01b0384168152602081018390527fb930d7c3c6896f70ea10a959f1d9a7c04e0467138efa4c7040570d4b8f4894b6910160405180910390a15050565b6000546001600160a01b0316331461180e5760405162461bcd60e51b815260040161039f90612277565b6001600160a01b0381166118735760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b606482015260840161039f565b6102df81611a5a565b60005b81518110156119c057600082828151811061189c5761189c6123d1565b60209081029190910101516040516370a0823160e01b81523360048201526001600160a01b03909116906370a0823190602401602060405180830381865afa1580156118ec573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061191091906122eb565b9050611935838381518110611927576119276123d1565b602002602001015182610ece565b828281518110611947576119476123d1565b602090810291909101015160405163055de27560e01b81523360048201526001600160a01b039091169063055de27590602401600060405180830381600087803b15801561199457600080fd5b505af11580156119a8573d6000803e3d6000fd5b505050505080806119b8906123fd565b91505061187f565b5050565b60005b81518110156119c0578181815181106119e2576119e26123d1565b602090810291909101015160405163055de27560e01b81523360048201526001600160a01b039091169063055de27590602401600060405180830381600087803b158015611a2f57600080fd5b505af1158015611a43573d6000803e3d6000fd5b505050508080611a52906123fd565b9150506119c7565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6040516001600160a01b0380851660248301528316604482015260648101829052611b159085906323b872dd60e01b906084015b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b031990931692909217909152611b50565b50505050565b6040516001600160a01b038316602482015260448101829052611b4b90849063a9059cbb60e01b90606401611ade565b505050565b6000611ba5826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b0316611c229092919063ffffffff16565b805190915015611b4b5780806020019051810190611bc391906122c9565b611b4b5760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b606482015260840161039f565b6060611c318484600085611c39565b949350505050565b606082471015611c9a5760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b606482015260840161039f565b6001600160a01b0385163b611cf15760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000604482015260640161039f565b600080866001600160a01b03168587604051611d0d9190612430565b60006040518083038185875af1925050503d8060008114611d4a576040519150601f19603f3d011682016040523d82523d6000602084013e611d4f565b606091505b5091509150611d5f828286611d6a565b979650505050505050565b60608315611d795750816114fe565b825115611d895782518084602001fd5b8160405162461bcd60e51b815260040161039f919061244c565b6001600160a01b03811681146102df57600080fd5b60008060408385031215611dcb57600080fd5b8235611dd681611da3565b946020939093013593505050565b600060208284031215611df657600080fd5b81356114fe81611da3565b60005b83811015611e1c578181015183820152602001611e04565b83811115611b155750506000910152565b60008151808452611e45816020860160208601611e01565b601f01601f19169290920160200192915050565b60018060a01b0381511682526000602082015160606020850152611e806060850182611e2d565b60409384015160ff16949093019390935250919050565b6020815260006114fe6020830184611e59565b60006020808301818452808551808352604092508286019150828160051b8701018488016000805b84811015611f7c57898403603f19018652825180516001600160a01b03168552888101518986015287810151888601526060808201519086015260809081015160a0918601829052805191860182905289019060c086019084905b80821015611f6757611f5383855180516001600160a01b03168252602090810151910152565b928b0192918a019160019190910190611f2d565b50509689019694505091870191600101611ed2565b50919998505050505050505050565b600080600060408486031215611fa057600080fd5b8335611fab81611da3565b9250602084013567ffffffffffffffff80821115611fc857600080fd5b818601915086601f830112611fdc57600080fd5b813581811115611feb57600080fd5b8760208260051b850101111561200057600080fd5b6020830194508093505050509250925092565b60006020808301818452808551808352604092508286019150828160051b87010184880160005b8381101561207b57888303603f190185528151805187855261205e88860182611e59565b91890151948901949094529487019492509086019060010161203a565b509098975050505050505050565b602080825282518282018190526000919060409081850190868401855b828110156120dc576120cc84835180516001600160a01b03168252602090810151910152565b92840192908501906001016120a6565b5091979650505050505050565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f1916810167ffffffffffffffff81118282101715612128576121286120e9565b604052919050565b600067ffffffffffffffff82111561214a5761214a6120e9565b5060051b60200190565b6000602080838503121561216757600080fd5b823567ffffffffffffffff81111561217e57600080fd5b8301601f8101851361218f57600080fd5b80356121a261219d82612130565b6120ff565b81815260059190911b820183019083810190878311156121c157600080fd5b928401925b82841015611d5f5783356121d981611da3565b825292840192908401906121c6565b600060208083850312156121fb57600080fd5b825167ffffffffffffffff81111561221257600080fd5b8301601f8101851361222357600080fd5b805161223161219d82612130565b81815260059190911b8201830190838101908783111561225057600080fd5b928401925b82841015611d5f57835161226881611da3565b82529284019290840190612255565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b6000602082840312156122be57600080fd5b81516114fe81611da3565b6000602082840312156122db57600080fd5b815180151581146114fe57600080fd5b6000602082840312156122fd57600080fd5b5051919050565b634e487b7160e01b600052600160045260246000fd5b60006020828403121561232c57600080fd5b815167ffffffffffffffff8082111561234457600080fd5b818401915084601f83011261235857600080fd5b81518181111561236a5761236a6120e9565b61237d601f8201601f19166020016120ff565b915080825285602082850101111561239457600080fd5b6123a5816020840160208601611e01565b50949350505050565b6000602082840312156123c057600080fd5b815160ff811681146114fe57600080fd5b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b6000600019821415612411576124116123e7565b5060010190565b6000821982111561242b5761242b6123e7565b500190565b60008251612442818460208701611e01565b9190910192915050565b6020815260006114fe6020830184611e2d56fea2646970667358221220ea1640efcfb28506b27c48d83b5d8b9fcb2e13acdf883f12375ab7f121fc096b64736f6c634300080b0033";

type StakingRewardsHelperConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: StakingRewardsHelperConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class StakingRewardsHelper__factory extends ContractFactory {
  constructor(...args: StakingRewardsHelperConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    _factory: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<StakingRewardsHelper> {
    return super.deploy(
      _factory,
      overrides || {}
    ) as Promise<StakingRewardsHelper>;
  }
  override getDeployTransaction(
    _factory: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(_factory, overrides || {});
  }
  override attach(address: string): StakingRewardsHelper {
    return super.attach(address) as StakingRewardsHelper;
  }
  override connect(signer: Signer): StakingRewardsHelper__factory {
    return super.connect(signer) as StakingRewardsHelper__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): StakingRewardsHelperInterface {
    return new utils.Interface(_abi) as StakingRewardsHelperInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): StakingRewardsHelper {
    return new Contract(
      address,
      _abi,
      signerOrProvider
    ) as StakingRewardsHelper;
  }
}
