/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Contract, Signer, utils } from "ethers";
import type { Provider } from "@ethersproject/providers";
import type {
  StakingRewardsFactoryInterface,
  StakingRewardsFactoryInterfaceInterface,
} from "../../../../contracts/staking-rewards/interfaces/StakingRewardsFactoryInterface";

const _abi = [
  {
    inputs: [],
    name: "getAllStakingRewards",
    outputs: [
      {
        internalType: "address[]",
        name: "",
        type: "address[]",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "stakingToken",
        type: "address",
      },
    ],
    name: "getStakingRewards",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getStakingRewardsCount",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "underlying",
        type: "address",
      },
    ],
    name: "getStakingToken",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
];

export class StakingRewardsFactoryInterface__factory {
  static readonly abi = _abi;
  static createInterface(): StakingRewardsFactoryInterfaceInterface {
    return new utils.Interface(_abi) as StakingRewardsFactoryInterfaceInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): StakingRewardsFactoryInterface {
    return new Contract(
      address,
      _abi,
      signerOrProvider
    ) as StakingRewardsFactoryInterface;
  }
}
