/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BytesLike,
  CallOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../../common";

export interface CCollateralCapStorageInterface extends utils.Interface {
  functions: {
    "accountCollateralTokens(address)": FunctionFragment;
    "collateralCap()": FunctionFragment;
    "isCollateralTokenInit(address)": FunctionFragment;
    "totalCollateralTokens()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "accountCollateralTokens"
      | "collateralCap"
      | "isCollateralTokenInit"
      | "totalCollateralTokens"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "accountCollateralTokens",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "collateralCap",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "isCollateralTokenInit",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "totalCollateralTokens",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "accountCollateralTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "collateralCap",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isCollateralTokenInit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalCollateralTokens",
    data: BytesLike
  ): Result;

  events: {};
}

export interface CCollateralCapStorage extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: CCollateralCapStorageInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    accountCollateralTokens(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    collateralCap(overrides?: CallOverrides): Promise<[BigNumber]>;

    isCollateralTokenInit(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    totalCollateralTokens(overrides?: CallOverrides): Promise<[BigNumber]>;
  };

  accountCollateralTokens(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  collateralCap(overrides?: CallOverrides): Promise<BigNumber>;

  isCollateralTokenInit(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  totalCollateralTokens(overrides?: CallOverrides): Promise<BigNumber>;

  callStatic: {
    accountCollateralTokens(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    collateralCap(overrides?: CallOverrides): Promise<BigNumber>;

    isCollateralTokenInit(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    totalCollateralTokens(overrides?: CallOverrides): Promise<BigNumber>;
  };

  filters: {};

  estimateGas: {
    accountCollateralTokens(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    collateralCap(overrides?: CallOverrides): Promise<BigNumber>;

    isCollateralTokenInit(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    totalCollateralTokens(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    accountCollateralTokens(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    collateralCap(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    isCollateralTokenInit(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    totalCollateralTokens(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
