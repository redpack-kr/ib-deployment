/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../../common";

export interface PriceOracleProxyUSDInterface extends utils.Interface {
  functions: {
    "_setAdmin(address)": FunctionFragment;
    "_setAggregators(address[],address[],uint8[])": FunctionFragment;
    "_setGuardian(address)": FunctionFragment;
    "admin()": FunctionFragment;
    "aggregators(address)": FunctionFragment;
    "ethUsdAggregator()": FunctionFragment;
    "getUnderlyingPrice(address)": FunctionFragment;
    "guardian()": FunctionFragment;
    "v1PriceOracle()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "_setAdmin"
      | "_setAggregators"
      | "_setGuardian"
      | "admin"
      | "aggregators"
      | "ethUsdAggregator"
      | "getUnderlyingPrice"
      | "guardian"
      | "v1PriceOracle"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "_setAdmin",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "_setAggregators",
    values: [
      PromiseOrValue<string>[],
      PromiseOrValue<string>[],
      PromiseOrValue<BigNumberish>[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "_setGuardian",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(functionFragment: "admin", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "aggregators",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "ethUsdAggregator",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getUnderlyingPrice",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(functionFragment: "guardian", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "v1PriceOracle",
    values?: undefined
  ): string;

  decodeFunctionResult(functionFragment: "_setAdmin", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "_setAggregators",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "_setGuardian",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "admin", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "aggregators",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "ethUsdAggregator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUnderlyingPrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "guardian", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "v1PriceOracle",
    data: BytesLike
  ): Result;

  events: {
    "AggregatorUpdated(address,address,uint8)": EventFragment;
    "SetAdmin(address)": EventFragment;
    "SetGuardian(address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "AggregatorUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetAdmin"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetGuardian"): EventFragment;
}

export interface AggregatorUpdatedEventObject {
  cTokenAddress: string;
  source: string;
  base: number;
}
export type AggregatorUpdatedEvent = TypedEvent<
  [string, string, number],
  AggregatorUpdatedEventObject
>;

export type AggregatorUpdatedEventFilter =
  TypedEventFilter<AggregatorUpdatedEvent>;

export interface SetAdminEventObject {
  admin: string;
}
export type SetAdminEvent = TypedEvent<[string], SetAdminEventObject>;

export type SetAdminEventFilter = TypedEventFilter<SetAdminEvent>;

export interface SetGuardianEventObject {
  guardian: string;
}
export type SetGuardianEvent = TypedEvent<[string], SetGuardianEventObject>;

export type SetGuardianEventFilter = TypedEventFilter<SetGuardianEvent>;

export interface PriceOracleProxyUSD extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: PriceOracleProxyUSDInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    _setAdmin(
      _admin: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    _setAggregators(
      cTokenAddresses: PromiseOrValue<string>[],
      sources: PromiseOrValue<string>[],
      bases: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    _setGuardian(
      _guardian: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    admin(overrides?: CallOverrides): Promise<[string]>;

    aggregators(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[string, number] & { source: string; base: number }>;

    ethUsdAggregator(overrides?: CallOverrides): Promise<[string]>;

    getUnderlyingPrice(
      cToken: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    guardian(overrides?: CallOverrides): Promise<[string]>;

    v1PriceOracle(overrides?: CallOverrides): Promise<[string]>;
  };

  _setAdmin(
    _admin: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  _setAggregators(
    cTokenAddresses: PromiseOrValue<string>[],
    sources: PromiseOrValue<string>[],
    bases: PromiseOrValue<BigNumberish>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  _setGuardian(
    _guardian: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  admin(overrides?: CallOverrides): Promise<string>;

  aggregators(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<[string, number] & { source: string; base: number }>;

  ethUsdAggregator(overrides?: CallOverrides): Promise<string>;

  getUnderlyingPrice(
    cToken: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  guardian(overrides?: CallOverrides): Promise<string>;

  v1PriceOracle(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    _setAdmin(
      _admin: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    _setAggregators(
      cTokenAddresses: PromiseOrValue<string>[],
      sources: PromiseOrValue<string>[],
      bases: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<void>;

    _setGuardian(
      _guardian: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    admin(overrides?: CallOverrides): Promise<string>;

    aggregators(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[string, number] & { source: string; base: number }>;

    ethUsdAggregator(overrides?: CallOverrides): Promise<string>;

    getUnderlyingPrice(
      cToken: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    guardian(overrides?: CallOverrides): Promise<string>;

    v1PriceOracle(overrides?: CallOverrides): Promise<string>;
  };

  filters: {
    "AggregatorUpdated(address,address,uint8)"(
      cTokenAddress?: null,
      source?: null,
      base?: null
    ): AggregatorUpdatedEventFilter;
    AggregatorUpdated(
      cTokenAddress?: null,
      source?: null,
      base?: null
    ): AggregatorUpdatedEventFilter;

    "SetAdmin(address)"(admin?: null): SetAdminEventFilter;
    SetAdmin(admin?: null): SetAdminEventFilter;

    "SetGuardian(address)"(guardian?: null): SetGuardianEventFilter;
    SetGuardian(guardian?: null): SetGuardianEventFilter;
  };

  estimateGas: {
    _setAdmin(
      _admin: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    _setAggregators(
      cTokenAddresses: PromiseOrValue<string>[],
      sources: PromiseOrValue<string>[],
      bases: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    _setGuardian(
      _guardian: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    admin(overrides?: CallOverrides): Promise<BigNumber>;

    aggregators(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    ethUsdAggregator(overrides?: CallOverrides): Promise<BigNumber>;

    getUnderlyingPrice(
      cToken: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    guardian(overrides?: CallOverrides): Promise<BigNumber>;

    v1PriceOracle(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    _setAdmin(
      _admin: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    _setAggregators(
      cTokenAddresses: PromiseOrValue<string>[],
      sources: PromiseOrValue<string>[],
      bases: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    _setGuardian(
      _guardian: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    admin(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    aggregators(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    ethUsdAggregator(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getUnderlyingPrice(
      cToken: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    guardian(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    v1PriceOracle(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
