/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../../common";

export interface PriceOracleProxyInterface extends utils.Interface {
  functions: {
    "ARS()": FunctionFragment;
    "AUD()": FunctionFragment;
    "BRL()": FunctionFragment;
    "BTC()": FunctionFragment;
    "CAD()": FunctionFragment;
    "CHF()": FunctionFragment;
    "CNY()": FunctionFragment;
    "ETH()": FunctionFragment;
    "EUR()": FunctionFragment;
    "GBP()": FunctionFragment;
    "INR()": FunctionFragment;
    "JPY()": FunctionFragment;
    "KRW()": FunctionFragment;
    "NGN()": FunctionFragment;
    "NZD()": FunctionFragment;
    "PHP()": FunctionFragment;
    "RUB()": FunctionFragment;
    "SGD()": FunctionFragment;
    "USD()": FunctionFragment;
    "ZAR()": FunctionFragment;
    "_setAdmin(address)": FunctionFragment;
    "_setAggregators(address[],address[],address[])": FunctionFragment;
    "_setCurveTokens(address[],uint8[],uint8[],address[])": FunctionFragment;
    "_setGuardian(address)": FunctionFragment;
    "_setLPs(address[],bool[])": FunctionFragment;
    "_setYVaultTokens(address[],uint8[])": FunctionFragment;
    "admin()": FunctionFragment;
    "aggregators(address)": FunctionFragment;
    "btcAddresses(uint256)": FunctionFragment;
    "cEthAddress()": FunctionFragment;
    "crXSushiAddress()": FunctionFragment;
    "crvTokens(address)": FunctionFragment;
    "getUnderlyingPrice(address)": FunctionFragment;
    "guardian()": FunctionFragment;
    "isPriceOracle()": FunctionFragment;
    "isUnderlyingLP(address)": FunctionFragment;
    "registry()": FunctionFragment;
    "sushiAddress()": FunctionFragment;
    "usdcAddress()": FunctionFragment;
    "v1PriceOracle()": FunctionFragment;
    "wethAddress()": FunctionFragment;
    "xSushiExRateAddress()": FunctionFragment;
    "yvTokens(address)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "ARS"
      | "AUD"
      | "BRL"
      | "BTC"
      | "CAD"
      | "CHF"
      | "CNY"
      | "ETH"
      | "EUR"
      | "GBP"
      | "INR"
      | "JPY"
      | "KRW"
      | "NGN"
      | "NZD"
      | "PHP"
      | "RUB"
      | "SGD"
      | "USD"
      | "ZAR"
      | "_setAdmin"
      | "_setAggregators"
      | "_setCurveTokens"
      | "_setGuardian"
      | "_setLPs"
      | "_setYVaultTokens"
      | "admin"
      | "aggregators"
      | "btcAddresses"
      | "cEthAddress"
      | "crXSushiAddress"
      | "crvTokens"
      | "getUnderlyingPrice"
      | "guardian"
      | "isPriceOracle"
      | "isUnderlyingLP"
      | "registry"
      | "sushiAddress"
      | "usdcAddress"
      | "v1PriceOracle"
      | "wethAddress"
      | "xSushiExRateAddress"
      | "yvTokens"
  ): FunctionFragment;

  encodeFunctionData(functionFragment: "ARS", values?: undefined): string;
  encodeFunctionData(functionFragment: "AUD", values?: undefined): string;
  encodeFunctionData(functionFragment: "BRL", values?: undefined): string;
  encodeFunctionData(functionFragment: "BTC", values?: undefined): string;
  encodeFunctionData(functionFragment: "CAD", values?: undefined): string;
  encodeFunctionData(functionFragment: "CHF", values?: undefined): string;
  encodeFunctionData(functionFragment: "CNY", values?: undefined): string;
  encodeFunctionData(functionFragment: "ETH", values?: undefined): string;
  encodeFunctionData(functionFragment: "EUR", values?: undefined): string;
  encodeFunctionData(functionFragment: "GBP", values?: undefined): string;
  encodeFunctionData(functionFragment: "INR", values?: undefined): string;
  encodeFunctionData(functionFragment: "JPY", values?: undefined): string;
  encodeFunctionData(functionFragment: "KRW", values?: undefined): string;
  encodeFunctionData(functionFragment: "NGN", values?: undefined): string;
  encodeFunctionData(functionFragment: "NZD", values?: undefined): string;
  encodeFunctionData(functionFragment: "PHP", values?: undefined): string;
  encodeFunctionData(functionFragment: "RUB", values?: undefined): string;
  encodeFunctionData(functionFragment: "SGD", values?: undefined): string;
  encodeFunctionData(functionFragment: "USD", values?: undefined): string;
  encodeFunctionData(functionFragment: "ZAR", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "_setAdmin",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "_setAggregators",
    values: [
      PromiseOrValue<string>[],
      PromiseOrValue<string>[],
      PromiseOrValue<string>[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "_setCurveTokens",
    values: [
      PromiseOrValue<string>[],
      PromiseOrValue<BigNumberish>[],
      PromiseOrValue<BigNumberish>[],
      PromiseOrValue<string>[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "_setGuardian",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "_setLPs",
    values: [PromiseOrValue<string>[], PromiseOrValue<boolean>[]]
  ): string;
  encodeFunctionData(
    functionFragment: "_setYVaultTokens",
    values: [PromiseOrValue<string>[], PromiseOrValue<BigNumberish>[]]
  ): string;
  encodeFunctionData(functionFragment: "admin", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "aggregators",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "btcAddresses",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "cEthAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "crXSushiAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "crvTokens",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getUnderlyingPrice",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(functionFragment: "guardian", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "isPriceOracle",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "isUnderlyingLP",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(functionFragment: "registry", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "sushiAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "usdcAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "v1PriceOracle",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "wethAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "xSushiExRateAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "yvTokens",
    values: [PromiseOrValue<string>]
  ): string;

  decodeFunctionResult(functionFragment: "ARS", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "AUD", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "BRL", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "BTC", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "CAD", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "CHF", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "CNY", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "ETH", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "EUR", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "GBP", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "INR", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "JPY", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "KRW", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "NGN", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "NZD", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "PHP", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "RUB", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "SGD", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "USD", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "ZAR", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "_setAdmin", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "_setAggregators",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "_setCurveTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "_setGuardian",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "_setLPs", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "_setYVaultTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "admin", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "aggregators",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "btcAddresses",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "cEthAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "crXSushiAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "crvTokens", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getUnderlyingPrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "guardian", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isPriceOracle",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isUnderlyingLP",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "registry", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "sushiAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "usdcAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "v1PriceOracle",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "wethAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "xSushiExRateAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "yvTokens", data: BytesLike): Result;

  events: {
    "AggregatorUpdated(address,address,address,bool)": EventFragment;
    "IsLPUpdated(address,bool)": EventFragment;
    "SetAdmin(address)": EventFragment;
    "SetCurveToken(address,uint8,address)": EventFragment;
    "SetGuardian(address)": EventFragment;
    "SetYVaultToken(address,uint8)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "AggregatorUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "IsLPUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetAdmin"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetCurveToken"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetGuardian"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetYVaultToken"): EventFragment;
}

export interface AggregatorUpdatedEventObject {
  tokenAddress: string;
  base: string;
  quote: string;
  isUsed: boolean;
}
export type AggregatorUpdatedEvent = TypedEvent<
  [string, string, string, boolean],
  AggregatorUpdatedEventObject
>;

export type AggregatorUpdatedEventFilter =
  TypedEventFilter<AggregatorUpdatedEvent>;

export interface IsLPUpdatedEventObject {
  tokenAddress: string;
  isLP: boolean;
}
export type IsLPUpdatedEvent = TypedEvent<
  [string, boolean],
  IsLPUpdatedEventObject
>;

export type IsLPUpdatedEventFilter = TypedEventFilter<IsLPUpdatedEvent>;

export interface SetAdminEventObject {
  admin: string;
}
export type SetAdminEvent = TypedEvent<[string], SetAdminEventObject>;

export type SetAdminEventFilter = TypedEventFilter<SetAdminEvent>;

export interface SetCurveTokenEventObject {
  token: string;
  poolType: number;
  swap: string;
}
export type SetCurveTokenEvent = TypedEvent<
  [string, number, string],
  SetCurveTokenEventObject
>;

export type SetCurveTokenEventFilter = TypedEventFilter<SetCurveTokenEvent>;

export interface SetGuardianEventObject {
  guardian: string;
}
export type SetGuardianEvent = TypedEvent<[string], SetGuardianEventObject>;

export type SetGuardianEventFilter = TypedEventFilter<SetGuardianEvent>;

export interface SetYVaultTokenEventObject {
  token: string;
  version: number;
}
export type SetYVaultTokenEvent = TypedEvent<
  [string, number],
  SetYVaultTokenEventObject
>;

export type SetYVaultTokenEventFilter = TypedEventFilter<SetYVaultTokenEvent>;

export interface PriceOracleProxy extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: PriceOracleProxyInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    ARS(overrides?: CallOverrides): Promise<[string]>;

    AUD(overrides?: CallOverrides): Promise<[string]>;

    BRL(overrides?: CallOverrides): Promise<[string]>;

    BTC(overrides?: CallOverrides): Promise<[string]>;

    CAD(overrides?: CallOverrides): Promise<[string]>;

    CHF(overrides?: CallOverrides): Promise<[string]>;

    CNY(overrides?: CallOverrides): Promise<[string]>;

    ETH(overrides?: CallOverrides): Promise<[string]>;

    EUR(overrides?: CallOverrides): Promise<[string]>;

    GBP(overrides?: CallOverrides): Promise<[string]>;

    INR(overrides?: CallOverrides): Promise<[string]>;

    JPY(overrides?: CallOverrides): Promise<[string]>;

    KRW(overrides?: CallOverrides): Promise<[string]>;

    NGN(overrides?: CallOverrides): Promise<[string]>;

    NZD(overrides?: CallOverrides): Promise<[string]>;

    PHP(overrides?: CallOverrides): Promise<[string]>;

    RUB(overrides?: CallOverrides): Promise<[string]>;

    SGD(overrides?: CallOverrides): Promise<[string]>;

    USD(overrides?: CallOverrides): Promise<[string]>;

    ZAR(overrides?: CallOverrides): Promise<[string]>;

    _setAdmin(
      _admin: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    _setAggregators(
      tokenAddresses: PromiseOrValue<string>[],
      bases: PromiseOrValue<string>[],
      quotes: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    _setCurveTokens(
      tokenAddresses: PromiseOrValue<string>[],
      version: PromiseOrValue<BigNumberish>[],
      poolType: PromiseOrValue<BigNumberish>[],
      swap: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    _setGuardian(
      _guardian: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    _setLPs(
      tokenAddresses: PromiseOrValue<string>[],
      isLP: PromiseOrValue<boolean>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    _setYVaultTokens(
      tokenAddresses: PromiseOrValue<string>[],
      version: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    admin(overrides?: CallOverrides): Promise<[string]>;

    aggregators(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [string, string, boolean] & {
        base: string;
        quote: string;
        isUsed: boolean;
      }
    >;

    btcAddresses(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    cEthAddress(overrides?: CallOverrides): Promise<[string]>;

    crXSushiAddress(overrides?: CallOverrides): Promise<[string]>;

    crvTokens(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [boolean, number, string] & {
        isCrvToken: boolean;
        poolType: number;
        curveSwap: string;
      }
    >;

    getUnderlyingPrice(
      cToken: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    guardian(overrides?: CallOverrides): Promise<[string]>;

    isPriceOracle(overrides?: CallOverrides): Promise<[boolean]>;

    isUnderlyingLP(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    registry(overrides?: CallOverrides): Promise<[string]>;

    sushiAddress(overrides?: CallOverrides): Promise<[string]>;

    usdcAddress(overrides?: CallOverrides): Promise<[string]>;

    v1PriceOracle(overrides?: CallOverrides): Promise<[string]>;

    wethAddress(overrides?: CallOverrides): Promise<[string]>;

    xSushiExRateAddress(overrides?: CallOverrides): Promise<[string]>;

    yvTokens(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean, number] & { isYvToken: boolean; version: number }>;
  };

  ARS(overrides?: CallOverrides): Promise<string>;

  AUD(overrides?: CallOverrides): Promise<string>;

  BRL(overrides?: CallOverrides): Promise<string>;

  BTC(overrides?: CallOverrides): Promise<string>;

  CAD(overrides?: CallOverrides): Promise<string>;

  CHF(overrides?: CallOverrides): Promise<string>;

  CNY(overrides?: CallOverrides): Promise<string>;

  ETH(overrides?: CallOverrides): Promise<string>;

  EUR(overrides?: CallOverrides): Promise<string>;

  GBP(overrides?: CallOverrides): Promise<string>;

  INR(overrides?: CallOverrides): Promise<string>;

  JPY(overrides?: CallOverrides): Promise<string>;

  KRW(overrides?: CallOverrides): Promise<string>;

  NGN(overrides?: CallOverrides): Promise<string>;

  NZD(overrides?: CallOverrides): Promise<string>;

  PHP(overrides?: CallOverrides): Promise<string>;

  RUB(overrides?: CallOverrides): Promise<string>;

  SGD(overrides?: CallOverrides): Promise<string>;

  USD(overrides?: CallOverrides): Promise<string>;

  ZAR(overrides?: CallOverrides): Promise<string>;

  _setAdmin(
    _admin: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  _setAggregators(
    tokenAddresses: PromiseOrValue<string>[],
    bases: PromiseOrValue<string>[],
    quotes: PromiseOrValue<string>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  _setCurveTokens(
    tokenAddresses: PromiseOrValue<string>[],
    version: PromiseOrValue<BigNumberish>[],
    poolType: PromiseOrValue<BigNumberish>[],
    swap: PromiseOrValue<string>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  _setGuardian(
    _guardian: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  _setLPs(
    tokenAddresses: PromiseOrValue<string>[],
    isLP: PromiseOrValue<boolean>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  _setYVaultTokens(
    tokenAddresses: PromiseOrValue<string>[],
    version: PromiseOrValue<BigNumberish>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  admin(overrides?: CallOverrides): Promise<string>;

  aggregators(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<
    [string, string, boolean] & { base: string; quote: string; isUsed: boolean }
  >;

  btcAddresses(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>;

  cEthAddress(overrides?: CallOverrides): Promise<string>;

  crXSushiAddress(overrides?: CallOverrides): Promise<string>;

  crvTokens(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<
    [boolean, number, string] & {
      isCrvToken: boolean;
      poolType: number;
      curveSwap: string;
    }
  >;

  getUnderlyingPrice(
    cToken: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  guardian(overrides?: CallOverrides): Promise<string>;

  isPriceOracle(overrides?: CallOverrides): Promise<boolean>;

  isUnderlyingLP(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  registry(overrides?: CallOverrides): Promise<string>;

  sushiAddress(overrides?: CallOverrides): Promise<string>;

  usdcAddress(overrides?: CallOverrides): Promise<string>;

  v1PriceOracle(overrides?: CallOverrides): Promise<string>;

  wethAddress(overrides?: CallOverrides): Promise<string>;

  xSushiExRateAddress(overrides?: CallOverrides): Promise<string>;

  yvTokens(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<[boolean, number] & { isYvToken: boolean; version: number }>;

  callStatic: {
    ARS(overrides?: CallOverrides): Promise<string>;

    AUD(overrides?: CallOverrides): Promise<string>;

    BRL(overrides?: CallOverrides): Promise<string>;

    BTC(overrides?: CallOverrides): Promise<string>;

    CAD(overrides?: CallOverrides): Promise<string>;

    CHF(overrides?: CallOverrides): Promise<string>;

    CNY(overrides?: CallOverrides): Promise<string>;

    ETH(overrides?: CallOverrides): Promise<string>;

    EUR(overrides?: CallOverrides): Promise<string>;

    GBP(overrides?: CallOverrides): Promise<string>;

    INR(overrides?: CallOverrides): Promise<string>;

    JPY(overrides?: CallOverrides): Promise<string>;

    KRW(overrides?: CallOverrides): Promise<string>;

    NGN(overrides?: CallOverrides): Promise<string>;

    NZD(overrides?: CallOverrides): Promise<string>;

    PHP(overrides?: CallOverrides): Promise<string>;

    RUB(overrides?: CallOverrides): Promise<string>;

    SGD(overrides?: CallOverrides): Promise<string>;

    USD(overrides?: CallOverrides): Promise<string>;

    ZAR(overrides?: CallOverrides): Promise<string>;

    _setAdmin(
      _admin: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    _setAggregators(
      tokenAddresses: PromiseOrValue<string>[],
      bases: PromiseOrValue<string>[],
      quotes: PromiseOrValue<string>[],
      overrides?: CallOverrides
    ): Promise<void>;

    _setCurveTokens(
      tokenAddresses: PromiseOrValue<string>[],
      version: PromiseOrValue<BigNumberish>[],
      poolType: PromiseOrValue<BigNumberish>[],
      swap: PromiseOrValue<string>[],
      overrides?: CallOverrides
    ): Promise<void>;

    _setGuardian(
      _guardian: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    _setLPs(
      tokenAddresses: PromiseOrValue<string>[],
      isLP: PromiseOrValue<boolean>[],
      overrides?: CallOverrides
    ): Promise<void>;

    _setYVaultTokens(
      tokenAddresses: PromiseOrValue<string>[],
      version: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<void>;

    admin(overrides?: CallOverrides): Promise<string>;

    aggregators(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [string, string, boolean] & {
        base: string;
        quote: string;
        isUsed: boolean;
      }
    >;

    btcAddresses(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    cEthAddress(overrides?: CallOverrides): Promise<string>;

    crXSushiAddress(overrides?: CallOverrides): Promise<string>;

    crvTokens(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [boolean, number, string] & {
        isCrvToken: boolean;
        poolType: number;
        curveSwap: string;
      }
    >;

    getUnderlyingPrice(
      cToken: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    guardian(overrides?: CallOverrides): Promise<string>;

    isPriceOracle(overrides?: CallOverrides): Promise<boolean>;

    isUnderlyingLP(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    registry(overrides?: CallOverrides): Promise<string>;

    sushiAddress(overrides?: CallOverrides): Promise<string>;

    usdcAddress(overrides?: CallOverrides): Promise<string>;

    v1PriceOracle(overrides?: CallOverrides): Promise<string>;

    wethAddress(overrides?: CallOverrides): Promise<string>;

    xSushiExRateAddress(overrides?: CallOverrides): Promise<string>;

    yvTokens(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean, number] & { isYvToken: boolean; version: number }>;
  };

  filters: {
    "AggregatorUpdated(address,address,address,bool)"(
      tokenAddress?: null,
      base?: null,
      quote?: null,
      isUsed?: null
    ): AggregatorUpdatedEventFilter;
    AggregatorUpdated(
      tokenAddress?: null,
      base?: null,
      quote?: null,
      isUsed?: null
    ): AggregatorUpdatedEventFilter;

    "IsLPUpdated(address,bool)"(
      tokenAddress?: null,
      isLP?: null
    ): IsLPUpdatedEventFilter;
    IsLPUpdated(tokenAddress?: null, isLP?: null): IsLPUpdatedEventFilter;

    "SetAdmin(address)"(admin?: null): SetAdminEventFilter;
    SetAdmin(admin?: null): SetAdminEventFilter;

    "SetCurveToken(address,uint8,address)"(
      token?: null,
      poolType?: null,
      swap?: null
    ): SetCurveTokenEventFilter;
    SetCurveToken(
      token?: null,
      poolType?: null,
      swap?: null
    ): SetCurveTokenEventFilter;

    "SetGuardian(address)"(guardian?: null): SetGuardianEventFilter;
    SetGuardian(guardian?: null): SetGuardianEventFilter;

    "SetYVaultToken(address,uint8)"(
      token?: null,
      version?: null
    ): SetYVaultTokenEventFilter;
    SetYVaultToken(token?: null, version?: null): SetYVaultTokenEventFilter;
  };

  estimateGas: {
    ARS(overrides?: CallOverrides): Promise<BigNumber>;

    AUD(overrides?: CallOverrides): Promise<BigNumber>;

    BRL(overrides?: CallOverrides): Promise<BigNumber>;

    BTC(overrides?: CallOverrides): Promise<BigNumber>;

    CAD(overrides?: CallOverrides): Promise<BigNumber>;

    CHF(overrides?: CallOverrides): Promise<BigNumber>;

    CNY(overrides?: CallOverrides): Promise<BigNumber>;

    ETH(overrides?: CallOverrides): Promise<BigNumber>;

    EUR(overrides?: CallOverrides): Promise<BigNumber>;

    GBP(overrides?: CallOverrides): Promise<BigNumber>;

    INR(overrides?: CallOverrides): Promise<BigNumber>;

    JPY(overrides?: CallOverrides): Promise<BigNumber>;

    KRW(overrides?: CallOverrides): Promise<BigNumber>;

    NGN(overrides?: CallOverrides): Promise<BigNumber>;

    NZD(overrides?: CallOverrides): Promise<BigNumber>;

    PHP(overrides?: CallOverrides): Promise<BigNumber>;

    RUB(overrides?: CallOverrides): Promise<BigNumber>;

    SGD(overrides?: CallOverrides): Promise<BigNumber>;

    USD(overrides?: CallOverrides): Promise<BigNumber>;

    ZAR(overrides?: CallOverrides): Promise<BigNumber>;

    _setAdmin(
      _admin: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    _setAggregators(
      tokenAddresses: PromiseOrValue<string>[],
      bases: PromiseOrValue<string>[],
      quotes: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    _setCurveTokens(
      tokenAddresses: PromiseOrValue<string>[],
      version: PromiseOrValue<BigNumberish>[],
      poolType: PromiseOrValue<BigNumberish>[],
      swap: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    _setGuardian(
      _guardian: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    _setLPs(
      tokenAddresses: PromiseOrValue<string>[],
      isLP: PromiseOrValue<boolean>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    _setYVaultTokens(
      tokenAddresses: PromiseOrValue<string>[],
      version: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    admin(overrides?: CallOverrides): Promise<BigNumber>;

    aggregators(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    btcAddresses(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    cEthAddress(overrides?: CallOverrides): Promise<BigNumber>;

    crXSushiAddress(overrides?: CallOverrides): Promise<BigNumber>;

    crvTokens(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getUnderlyingPrice(
      cToken: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    guardian(overrides?: CallOverrides): Promise<BigNumber>;

    isPriceOracle(overrides?: CallOverrides): Promise<BigNumber>;

    isUnderlyingLP(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    registry(overrides?: CallOverrides): Promise<BigNumber>;

    sushiAddress(overrides?: CallOverrides): Promise<BigNumber>;

    usdcAddress(overrides?: CallOverrides): Promise<BigNumber>;

    v1PriceOracle(overrides?: CallOverrides): Promise<BigNumber>;

    wethAddress(overrides?: CallOverrides): Promise<BigNumber>;

    xSushiExRateAddress(overrides?: CallOverrides): Promise<BigNumber>;

    yvTokens(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    ARS(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    AUD(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    BRL(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    BTC(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    CAD(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    CHF(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    CNY(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    ETH(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    EUR(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    GBP(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    INR(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    JPY(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    KRW(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    NGN(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    NZD(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    PHP(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    RUB(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    SGD(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    USD(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    ZAR(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    _setAdmin(
      _admin: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    _setAggregators(
      tokenAddresses: PromiseOrValue<string>[],
      bases: PromiseOrValue<string>[],
      quotes: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    _setCurveTokens(
      tokenAddresses: PromiseOrValue<string>[],
      version: PromiseOrValue<BigNumberish>[],
      poolType: PromiseOrValue<BigNumberish>[],
      swap: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    _setGuardian(
      _guardian: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    _setLPs(
      tokenAddresses: PromiseOrValue<string>[],
      isLP: PromiseOrValue<boolean>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    _setYVaultTokens(
      tokenAddresses: PromiseOrValue<string>[],
      version: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    admin(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    aggregators(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    btcAddresses(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    cEthAddress(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    crXSushiAddress(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    crvTokens(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getUnderlyingPrice(
      cToken: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    guardian(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    isPriceOracle(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    isUnderlyingLP(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    registry(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    sushiAddress(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    usdcAddress(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    v1PriceOracle(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    wethAddress(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    xSushiExRateAddress(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    yvTokens(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
