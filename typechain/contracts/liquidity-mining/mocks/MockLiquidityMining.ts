/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../../common";

export declare namespace LiquidityMining {
  export type UserMarketsStruct = {
    market: PromiseOrValue<string>;
    supply: PromiseOrValue<boolean>;
    borrow: PromiseOrValue<boolean>;
  };

  export type UserMarketsStructOutput = [string, boolean, boolean] & {
    market: string;
    supply: boolean;
    borrow: boolean;
  };

  export type RewardTokenInfoStruct = {
    rewardTokenAddress: PromiseOrValue<string>;
    rewardTokenSymbol: PromiseOrValue<string>;
    rewardTokenDecimals: PromiseOrValue<BigNumberish>;
  };

  export type RewardTokenInfoStructOutput = [string, string, number] & {
    rewardTokenAddress: string;
    rewardTokenSymbol: string;
    rewardTokenDecimals: number;
  };

  export type RewardSpeedInfoStruct = {
    rewardToken: LiquidityMining.RewardTokenInfoStruct;
    supplySpeed: LiquidityMiningStorage.RewardSpeedStruct;
    borrowSpeed: LiquidityMiningStorage.RewardSpeedStruct;
  };

  export type RewardSpeedInfoStructOutput = [
    LiquidityMining.RewardTokenInfoStructOutput,
    LiquidityMiningStorage.RewardSpeedStructOutput,
    LiquidityMiningStorage.RewardSpeedStructOutput
  ] & {
    rewardToken: LiquidityMining.RewardTokenInfoStructOutput;
    supplySpeed: LiquidityMiningStorage.RewardSpeedStructOutput;
    borrowSpeed: LiquidityMiningStorage.RewardSpeedStructOutput;
  };

  export type MarketRewardSpeedStruct = {
    cToken: PromiseOrValue<string>;
    rewardSpeeds: LiquidityMining.RewardSpeedInfoStruct[];
  };

  export type MarketRewardSpeedStructOutput = [
    string,
    LiquidityMining.RewardSpeedInfoStructOutput[]
  ] & {
    cToken: string;
    rewardSpeeds: LiquidityMining.RewardSpeedInfoStructOutput[];
  };

  export type RewardAvailableStruct = {
    rewardToken: LiquidityMining.RewardTokenInfoStruct;
    amount: PromiseOrValue<BigNumberish>;
  };

  export type RewardAvailableStructOutput = [
    LiquidityMining.RewardTokenInfoStructOutput,
    BigNumber
  ] & {
    rewardToken: LiquidityMining.RewardTokenInfoStructOutput;
    amount: BigNumber;
  };
}

export declare namespace LiquidityMiningStorage {
  export type RewardSpeedStruct = {
    speed: PromiseOrValue<BigNumberish>;
    start: PromiseOrValue<BigNumberish>;
    end: PromiseOrValue<BigNumberish>;
  };

  export type RewardSpeedStructOutput = [BigNumber, BigNumber, BigNumber] & {
    speed: BigNumber;
    start: BigNumber;
    end: BigNumber;
  };
}

export interface MockLiquidityMiningInterface extends utils.Interface {
  functions: {
    "addRewardToken(address)": FunctionFragment;
    "claimAllRewards(address)": FunctionFragment;
    "claimRewards(address,address[],address[],bool,bool)": FunctionFragment;
    "claimSingleReward(address,address)": FunctionFragment;
    "comptroller()": FunctionFragment;
    "debtors(address)": FunctionFragment;
    "getBlockTimestamp()": FunctionFragment;
    "getMarketRewardSpeeds(address)": FunctionFragment;
    "getMultipleMarketRewardSpeeds(address[])": FunctionFragment;
    "getRewardTokenInfo(address)": FunctionFragment;
    "getRewardTokenList()": FunctionFragment;
    "getRewardsAvailable(address)": FunctionFragment;
    "harnessTransferReward(address,address,uint256)": FunctionFragment;
    "harnessUpdateGlobalBorrowIndex(address,address)": FunctionFragment;
    "harnessUpdateGlobalSupplyIndex(address,address)": FunctionFragment;
    "initialize(address,address)": FunctionFragment;
    "owner()": FunctionFragment;
    "proxiableUUID()": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "rewardAccrued(address,address)": FunctionFragment;
    "rewardBorrowSpeeds(address,address)": FunctionFragment;
    "rewardBorrowState(address,address)": FunctionFragment;
    "rewardBorrowerIndex(address,address,address)": FunctionFragment;
    "rewardReceivers(address)": FunctionFragment;
    "rewardSupplierIndex(address,address,address)": FunctionFragment;
    "rewardSupplySpeeds(address,address)": FunctionFragment;
    "rewardSupplyState(address,address)": FunctionFragment;
    "rewardTokens(uint256)": FunctionFragment;
    "rewardTokensMap(address)": FunctionFragment;
    "setBlockTimestamp(uint256)": FunctionFragment;
    "setRewardBorrowSpeeds(address,address[],uint256[],uint256[],uint256[])": FunctionFragment;
    "setRewardSupplySpeeds(address,address[],uint256[],uint256[],uint256[])": FunctionFragment;
    "setRewardsReceiver(address,address)": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "updateBorrowIndex(address,address[])": FunctionFragment;
    "updateDebtors(address[])": FunctionFragment;
    "updateSupplyIndex(address,address[])": FunctionFragment;
    "upgradeTo(address)": FunctionFragment;
    "upgradeToAndCall(address,bytes)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "addRewardToken"
      | "claimAllRewards"
      | "claimRewards"
      | "claimSingleReward"
      | "comptroller"
      | "debtors"
      | "getBlockTimestamp"
      | "getMarketRewardSpeeds"
      | "getMultipleMarketRewardSpeeds"
      | "getRewardTokenInfo"
      | "getRewardTokenList"
      | "getRewardsAvailable"
      | "harnessTransferReward"
      | "harnessUpdateGlobalBorrowIndex"
      | "harnessUpdateGlobalSupplyIndex"
      | "initialize"
      | "owner"
      | "proxiableUUID"
      | "renounceOwnership"
      | "rewardAccrued"
      | "rewardBorrowSpeeds"
      | "rewardBorrowState"
      | "rewardBorrowerIndex"
      | "rewardReceivers"
      | "rewardSupplierIndex"
      | "rewardSupplySpeeds"
      | "rewardSupplyState"
      | "rewardTokens"
      | "rewardTokensMap"
      | "setBlockTimestamp"
      | "setRewardBorrowSpeeds"
      | "setRewardSupplySpeeds"
      | "setRewardsReceiver"
      | "transferOwnership"
      | "updateBorrowIndex"
      | "updateDebtors"
      | "updateSupplyIndex"
      | "upgradeTo"
      | "upgradeToAndCall"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "addRewardToken",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "claimAllRewards",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "claimRewards",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>[],
      PromiseOrValue<string>[],
      PromiseOrValue<boolean>,
      PromiseOrValue<boolean>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "claimSingleReward",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "comptroller",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "debtors",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getBlockTimestamp",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getMarketRewardSpeeds",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getMultipleMarketRewardSpeeds",
    values: [PromiseOrValue<string>[]]
  ): string;
  encodeFunctionData(
    functionFragment: "getRewardTokenInfo",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getRewardTokenList",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getRewardsAvailable",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "harnessTransferReward",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "harnessUpdateGlobalBorrowIndex",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "harnessUpdateGlobalSupplyIndex",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "proxiableUUID",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "rewardAccrued",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "rewardBorrowSpeeds",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "rewardBorrowState",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "rewardBorrowerIndex",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "rewardReceivers",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "rewardSupplierIndex",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "rewardSupplySpeeds",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "rewardSupplyState",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "rewardTokens",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "rewardTokensMap",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setBlockTimestamp",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "setRewardBorrowSpeeds",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>[],
      PromiseOrValue<BigNumberish>[],
      PromiseOrValue<BigNumberish>[],
      PromiseOrValue<BigNumberish>[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "setRewardSupplySpeeds",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>[],
      PromiseOrValue<BigNumberish>[],
      PromiseOrValue<BigNumberish>[],
      PromiseOrValue<BigNumberish>[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "setRewardsReceiver",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "updateBorrowIndex",
    values: [PromiseOrValue<string>, PromiseOrValue<string>[]]
  ): string;
  encodeFunctionData(
    functionFragment: "updateDebtors",
    values: [PromiseOrValue<string>[]]
  ): string;
  encodeFunctionData(
    functionFragment: "updateSupplyIndex",
    values: [PromiseOrValue<string>, PromiseOrValue<string>[]]
  ): string;
  encodeFunctionData(
    functionFragment: "upgradeTo",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "upgradeToAndCall",
    values: [PromiseOrValue<string>, PromiseOrValue<BytesLike>]
  ): string;

  decodeFunctionResult(
    functionFragment: "addRewardToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "claimAllRewards",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "claimRewards",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "claimSingleReward",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "comptroller",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "debtors", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getBlockTimestamp",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getMarketRewardSpeeds",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getMultipleMarketRewardSpeeds",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRewardTokenInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRewardTokenList",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRewardsAvailable",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "harnessTransferReward",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "harnessUpdateGlobalBorrowIndex",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "harnessUpdateGlobalSupplyIndex",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "proxiableUUID",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "rewardAccrued",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "rewardBorrowSpeeds",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "rewardBorrowState",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "rewardBorrowerIndex",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "rewardReceivers",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "rewardSupplierIndex",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "rewardSupplySpeeds",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "rewardSupplyState",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "rewardTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "rewardTokensMap",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setBlockTimestamp",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setRewardBorrowSpeeds",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setRewardSupplySpeeds",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setRewardsReceiver",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateBorrowIndex",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateDebtors",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateSupplyIndex",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "upgradeTo", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "upgradeToAndCall",
    data: BytesLike
  ): Result;

  events: {
    "AdminChanged(address,address)": EventFragment;
    "BeaconUpgraded(address)": EventFragment;
    "Initialized(uint8)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "TransferReward(address,address,address,uint256)": EventFragment;
    "UpdateBorrowRewardSpeed(address,address,uint256,uint256,uint256)": EventFragment;
    "UpdateBorrowerRewardIndex(address,address,address,uint256,uint256)": EventFragment;
    "UpdateDebtor(address,bool)": EventFragment;
    "UpdateRewardReceiver(address,address)": EventFragment;
    "UpdateSupplierRewardIndex(address,address,address,uint256,uint256)": EventFragment;
    "UpdateSupplyRewardSpeed(address,address,uint256,uint256,uint256)": EventFragment;
    "Upgraded(address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "AdminChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "BeaconUpgraded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Initialized"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TransferReward"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "UpdateBorrowRewardSpeed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "UpdateBorrowerRewardIndex"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "UpdateDebtor"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "UpdateRewardReceiver"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "UpdateSupplierRewardIndex"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "UpdateSupplyRewardSpeed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Upgraded"): EventFragment;
}

export interface AdminChangedEventObject {
  previousAdmin: string;
  newAdmin: string;
}
export type AdminChangedEvent = TypedEvent<
  [string, string],
  AdminChangedEventObject
>;

export type AdminChangedEventFilter = TypedEventFilter<AdminChangedEvent>;

export interface BeaconUpgradedEventObject {
  beacon: string;
}
export type BeaconUpgradedEvent = TypedEvent<
  [string],
  BeaconUpgradedEventObject
>;

export type BeaconUpgradedEventFilter = TypedEventFilter<BeaconUpgradedEvent>;

export interface InitializedEventObject {
  version: number;
}
export type InitializedEvent = TypedEvent<[number], InitializedEventObject>;

export type InitializedEventFilter = TypedEventFilter<InitializedEvent>;

export interface OwnershipTransferredEventObject {
  previousOwner: string;
  newOwner: string;
}
export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  OwnershipTransferredEventObject
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export interface TransferRewardEventObject {
  rewardToken: string;
  account: string;
  receiver: string;
  amount: BigNumber;
}
export type TransferRewardEvent = TypedEvent<
  [string, string, string, BigNumber],
  TransferRewardEventObject
>;

export type TransferRewardEventFilter = TypedEventFilter<TransferRewardEvent>;

export interface UpdateBorrowRewardSpeedEventObject {
  rewardToken: string;
  cToken: string;
  speed: BigNumber;
  start: BigNumber;
  end: BigNumber;
}
export type UpdateBorrowRewardSpeedEvent = TypedEvent<
  [string, string, BigNumber, BigNumber, BigNumber],
  UpdateBorrowRewardSpeedEventObject
>;

export type UpdateBorrowRewardSpeedEventFilter =
  TypedEventFilter<UpdateBorrowRewardSpeedEvent>;

export interface UpdateBorrowerRewardIndexEventObject {
  rewardToken: string;
  cToken: string;
  borrower: string;
  rewards: BigNumber;
  borrowIndex: BigNumber;
}
export type UpdateBorrowerRewardIndexEvent = TypedEvent<
  [string, string, string, BigNumber, BigNumber],
  UpdateBorrowerRewardIndexEventObject
>;

export type UpdateBorrowerRewardIndexEventFilter =
  TypedEventFilter<UpdateBorrowerRewardIndexEvent>;

export interface UpdateDebtorEventObject {
  account: string;
  isDebtor: boolean;
}
export type UpdateDebtorEvent = TypedEvent<
  [string, boolean],
  UpdateDebtorEventObject
>;

export type UpdateDebtorEventFilter = TypedEventFilter<UpdateDebtorEvent>;

export interface UpdateRewardReceiverEventObject {
  account: string;
  receiver: string;
}
export type UpdateRewardReceiverEvent = TypedEvent<
  [string, string],
  UpdateRewardReceiverEventObject
>;

export type UpdateRewardReceiverEventFilter =
  TypedEventFilter<UpdateRewardReceiverEvent>;

export interface UpdateSupplierRewardIndexEventObject {
  rewardToken: string;
  cToken: string;
  supplier: string;
  rewards: BigNumber;
  supplyIndex: BigNumber;
}
export type UpdateSupplierRewardIndexEvent = TypedEvent<
  [string, string, string, BigNumber, BigNumber],
  UpdateSupplierRewardIndexEventObject
>;

export type UpdateSupplierRewardIndexEventFilter =
  TypedEventFilter<UpdateSupplierRewardIndexEvent>;

export interface UpdateSupplyRewardSpeedEventObject {
  rewardToken: string;
  cToken: string;
  speed: BigNumber;
  start: BigNumber;
  end: BigNumber;
}
export type UpdateSupplyRewardSpeedEvent = TypedEvent<
  [string, string, BigNumber, BigNumber, BigNumber],
  UpdateSupplyRewardSpeedEventObject
>;

export type UpdateSupplyRewardSpeedEventFilter =
  TypedEventFilter<UpdateSupplyRewardSpeedEvent>;

export interface UpgradedEventObject {
  implementation: string;
}
export type UpgradedEvent = TypedEvent<[string], UpgradedEventObject>;

export type UpgradedEventFilter = TypedEventFilter<UpgradedEvent>;

export interface MockLiquidityMining extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: MockLiquidityMiningInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    addRewardToken(
      rewardToken: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    claimAllRewards(
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    claimRewards(
      account: PromiseOrValue<string>,
      cTokens: PromiseOrValue<string>[],
      rewards: PromiseOrValue<string>[],
      borrowers: PromiseOrValue<boolean>,
      suppliers: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    claimSingleReward(
      account: PromiseOrValue<string>,
      reward: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    comptroller(overrides?: CallOverrides): Promise<[string]>;

    debtors(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    getBlockTimestamp(overrides?: CallOverrides): Promise<[BigNumber]>;

    getMarketRewardSpeeds(
      cToken: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[LiquidityMining.MarketRewardSpeedStructOutput]>;

    getMultipleMarketRewardSpeeds(
      cTokens: PromiseOrValue<string>[],
      overrides?: CallOverrides
    ): Promise<[LiquidityMining.MarketRewardSpeedStructOutput[]]>;

    getRewardTokenInfo(
      rewardToken: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[LiquidityMining.RewardTokenInfoStructOutput]>;

    getRewardTokenList(overrides?: CallOverrides): Promise<[string[]]>;

    getRewardsAvailable(
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    harnessTransferReward(
      rewardToken: PromiseOrValue<string>,
      user: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    harnessUpdateGlobalBorrowIndex(
      rewardToken: PromiseOrValue<string>,
      cToken: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    harnessUpdateGlobalSupplyIndex(
      rewardToken: PromiseOrValue<string>,
      cToken: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    initialize(
      _admin: PromiseOrValue<string>,
      _comptroller: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    proxiableUUID(overrides?: CallOverrides): Promise<[string]>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    rewardAccrued(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    rewardBorrowSpeeds(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        speed: BigNumber;
        start: BigNumber;
        end: BigNumber;
      }
    >;

    rewardBorrowState(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { index: BigNumber; timestamp: BigNumber }
    >;

    rewardBorrowerIndex(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      arg2: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    rewardReceivers(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    rewardSupplierIndex(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      arg2: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    rewardSupplySpeeds(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        speed: BigNumber;
        start: BigNumber;
        end: BigNumber;
      }
    >;

    rewardSupplyState(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { index: BigNumber; timestamp: BigNumber }
    >;

    rewardTokens(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    rewardTokensMap(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    setBlockTimestamp(
      timestamp: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setRewardBorrowSpeeds(
      rewardToken: PromiseOrValue<string>,
      cTokens: PromiseOrValue<string>[],
      speeds: PromiseOrValue<BigNumberish>[],
      starts: PromiseOrValue<BigNumberish>[],
      ends: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setRewardSupplySpeeds(
      rewardToken: PromiseOrValue<string>,
      cTokens: PromiseOrValue<string>[],
      speeds: PromiseOrValue<BigNumberish>[],
      starts: PromiseOrValue<BigNumberish>[],
      ends: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setRewardsReceiver(
      account: PromiseOrValue<string>,
      receiver: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    updateBorrowIndex(
      cToken: PromiseOrValue<string>,
      borrowers: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    updateDebtors(
      accounts: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    updateSupplyIndex(
      cToken: PromiseOrValue<string>,
      suppliers: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    upgradeTo(
      newImplementation: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    upgradeToAndCall(
      newImplementation: PromiseOrValue<string>,
      data: PromiseOrValue<BytesLike>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  addRewardToken(
    rewardToken: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  claimAllRewards(
    account: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  claimRewards(
    account: PromiseOrValue<string>,
    cTokens: PromiseOrValue<string>[],
    rewards: PromiseOrValue<string>[],
    borrowers: PromiseOrValue<boolean>,
    suppliers: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  claimSingleReward(
    account: PromiseOrValue<string>,
    reward: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  comptroller(overrides?: CallOverrides): Promise<string>;

  debtors(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  getBlockTimestamp(overrides?: CallOverrides): Promise<BigNumber>;

  getMarketRewardSpeeds(
    cToken: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<LiquidityMining.MarketRewardSpeedStructOutput>;

  getMultipleMarketRewardSpeeds(
    cTokens: PromiseOrValue<string>[],
    overrides?: CallOverrides
  ): Promise<LiquidityMining.MarketRewardSpeedStructOutput[]>;

  getRewardTokenInfo(
    rewardToken: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<LiquidityMining.RewardTokenInfoStructOutput>;

  getRewardTokenList(overrides?: CallOverrides): Promise<string[]>;

  getRewardsAvailable(
    account: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  harnessTransferReward(
    rewardToken: PromiseOrValue<string>,
    user: PromiseOrValue<string>,
    amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  harnessUpdateGlobalBorrowIndex(
    rewardToken: PromiseOrValue<string>,
    cToken: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  harnessUpdateGlobalSupplyIndex(
    rewardToken: PromiseOrValue<string>,
    cToken: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  initialize(
    _admin: PromiseOrValue<string>,
    _comptroller: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  owner(overrides?: CallOverrides): Promise<string>;

  proxiableUUID(overrides?: CallOverrides): Promise<string>;

  renounceOwnership(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  rewardAccrued(
    arg0: PromiseOrValue<string>,
    arg1: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  rewardBorrowSpeeds(
    arg0: PromiseOrValue<string>,
    arg1: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber] & {
      speed: BigNumber;
      start: BigNumber;
      end: BigNumber;
    }
  >;

  rewardBorrowState(
    arg0: PromiseOrValue<string>,
    arg1: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber] & { index: BigNumber; timestamp: BigNumber }
  >;

  rewardBorrowerIndex(
    arg0: PromiseOrValue<string>,
    arg1: PromiseOrValue<string>,
    arg2: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  rewardReceivers(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<string>;

  rewardSupplierIndex(
    arg0: PromiseOrValue<string>,
    arg1: PromiseOrValue<string>,
    arg2: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  rewardSupplySpeeds(
    arg0: PromiseOrValue<string>,
    arg1: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber] & {
      speed: BigNumber;
      start: BigNumber;
      end: BigNumber;
    }
  >;

  rewardSupplyState(
    arg0: PromiseOrValue<string>,
    arg1: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber] & { index: BigNumber; timestamp: BigNumber }
  >;

  rewardTokens(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>;

  rewardTokensMap(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  setBlockTimestamp(
    timestamp: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setRewardBorrowSpeeds(
    rewardToken: PromiseOrValue<string>,
    cTokens: PromiseOrValue<string>[],
    speeds: PromiseOrValue<BigNumberish>[],
    starts: PromiseOrValue<BigNumberish>[],
    ends: PromiseOrValue<BigNumberish>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setRewardSupplySpeeds(
    rewardToken: PromiseOrValue<string>,
    cTokens: PromiseOrValue<string>[],
    speeds: PromiseOrValue<BigNumberish>[],
    starts: PromiseOrValue<BigNumberish>[],
    ends: PromiseOrValue<BigNumberish>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setRewardsReceiver(
    account: PromiseOrValue<string>,
    receiver: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  transferOwnership(
    newOwner: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  updateBorrowIndex(
    cToken: PromiseOrValue<string>,
    borrowers: PromiseOrValue<string>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  updateDebtors(
    accounts: PromiseOrValue<string>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  updateSupplyIndex(
    cToken: PromiseOrValue<string>,
    suppliers: PromiseOrValue<string>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  upgradeTo(
    newImplementation: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  upgradeToAndCall(
    newImplementation: PromiseOrValue<string>,
    data: PromiseOrValue<BytesLike>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    addRewardToken(
      rewardToken: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    claimAllRewards(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    claimRewards(
      account: PromiseOrValue<string>,
      cTokens: PromiseOrValue<string>[],
      rewards: PromiseOrValue<string>[],
      borrowers: PromiseOrValue<boolean>,
      suppliers: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<void>;

    claimSingleReward(
      account: PromiseOrValue<string>,
      reward: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<LiquidityMining.UserMarketsStructOutput[]>;

    comptroller(overrides?: CallOverrides): Promise<string>;

    debtors(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    getBlockTimestamp(overrides?: CallOverrides): Promise<BigNumber>;

    getMarketRewardSpeeds(
      cToken: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<LiquidityMining.MarketRewardSpeedStructOutput>;

    getMultipleMarketRewardSpeeds(
      cTokens: PromiseOrValue<string>[],
      overrides?: CallOverrides
    ): Promise<LiquidityMining.MarketRewardSpeedStructOutput[]>;

    getRewardTokenInfo(
      rewardToken: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<LiquidityMining.RewardTokenInfoStructOutput>;

    getRewardTokenList(overrides?: CallOverrides): Promise<string[]>;

    getRewardsAvailable(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<LiquidityMining.RewardAvailableStructOutput[]>;

    harnessTransferReward(
      rewardToken: PromiseOrValue<string>,
      user: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    harnessUpdateGlobalBorrowIndex(
      rewardToken: PromiseOrValue<string>,
      cToken: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    harnessUpdateGlobalSupplyIndex(
      rewardToken: PromiseOrValue<string>,
      cToken: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    initialize(
      _admin: PromiseOrValue<string>,
      _comptroller: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    owner(overrides?: CallOverrides): Promise<string>;

    proxiableUUID(overrides?: CallOverrides): Promise<string>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    rewardAccrued(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    rewardBorrowSpeeds(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        speed: BigNumber;
        start: BigNumber;
        end: BigNumber;
      }
    >;

    rewardBorrowState(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { index: BigNumber; timestamp: BigNumber }
    >;

    rewardBorrowerIndex(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      arg2: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    rewardReceivers(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<string>;

    rewardSupplierIndex(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      arg2: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    rewardSupplySpeeds(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        speed: BigNumber;
        start: BigNumber;
        end: BigNumber;
      }
    >;

    rewardSupplyState(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { index: BigNumber; timestamp: BigNumber }
    >;

    rewardTokens(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    rewardTokensMap(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    setBlockTimestamp(
      timestamp: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setRewardBorrowSpeeds(
      rewardToken: PromiseOrValue<string>,
      cTokens: PromiseOrValue<string>[],
      speeds: PromiseOrValue<BigNumberish>[],
      starts: PromiseOrValue<BigNumberish>[],
      ends: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<void>;

    setRewardSupplySpeeds(
      rewardToken: PromiseOrValue<string>,
      cTokens: PromiseOrValue<string>[],
      speeds: PromiseOrValue<BigNumberish>[],
      starts: PromiseOrValue<BigNumberish>[],
      ends: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<void>;

    setRewardsReceiver(
      account: PromiseOrValue<string>,
      receiver: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    updateBorrowIndex(
      cToken: PromiseOrValue<string>,
      borrowers: PromiseOrValue<string>[],
      overrides?: CallOverrides
    ): Promise<void>;

    updateDebtors(
      accounts: PromiseOrValue<string>[],
      overrides?: CallOverrides
    ): Promise<void>;

    updateSupplyIndex(
      cToken: PromiseOrValue<string>,
      suppliers: PromiseOrValue<string>[],
      overrides?: CallOverrides
    ): Promise<void>;

    upgradeTo(
      newImplementation: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    upgradeToAndCall(
      newImplementation: PromiseOrValue<string>,
      data: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "AdminChanged(address,address)"(
      previousAdmin?: null,
      newAdmin?: null
    ): AdminChangedEventFilter;
    AdminChanged(
      previousAdmin?: null,
      newAdmin?: null
    ): AdminChangedEventFilter;

    "BeaconUpgraded(address)"(
      beacon?: PromiseOrValue<string> | null
    ): BeaconUpgradedEventFilter;
    BeaconUpgraded(
      beacon?: PromiseOrValue<string> | null
    ): BeaconUpgradedEventFilter;

    "Initialized(uint8)"(version?: null): InitializedEventFilter;
    Initialized(version?: null): InitializedEventFilter;

    "OwnershipTransferred(address,address)"(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;

    "TransferReward(address,address,address,uint256)"(
      rewardToken?: PromiseOrValue<string> | null,
      account?: PromiseOrValue<string> | null,
      receiver?: PromiseOrValue<string> | null,
      amount?: null
    ): TransferRewardEventFilter;
    TransferReward(
      rewardToken?: PromiseOrValue<string> | null,
      account?: PromiseOrValue<string> | null,
      receiver?: PromiseOrValue<string> | null,
      amount?: null
    ): TransferRewardEventFilter;

    "UpdateBorrowRewardSpeed(address,address,uint256,uint256,uint256)"(
      rewardToken?: PromiseOrValue<string> | null,
      cToken?: PromiseOrValue<string> | null,
      speed?: PromiseOrValue<BigNumberish> | null,
      start?: null,
      end?: null
    ): UpdateBorrowRewardSpeedEventFilter;
    UpdateBorrowRewardSpeed(
      rewardToken?: PromiseOrValue<string> | null,
      cToken?: PromiseOrValue<string> | null,
      speed?: PromiseOrValue<BigNumberish> | null,
      start?: null,
      end?: null
    ): UpdateBorrowRewardSpeedEventFilter;

    "UpdateBorrowerRewardIndex(address,address,address,uint256,uint256)"(
      rewardToken?: PromiseOrValue<string> | null,
      cToken?: PromiseOrValue<string> | null,
      borrower?: PromiseOrValue<string> | null,
      rewards?: null,
      borrowIndex?: null
    ): UpdateBorrowerRewardIndexEventFilter;
    UpdateBorrowerRewardIndex(
      rewardToken?: PromiseOrValue<string> | null,
      cToken?: PromiseOrValue<string> | null,
      borrower?: PromiseOrValue<string> | null,
      rewards?: null,
      borrowIndex?: null
    ): UpdateBorrowerRewardIndexEventFilter;

    "UpdateDebtor(address,bool)"(
      account?: PromiseOrValue<string> | null,
      isDebtor?: PromiseOrValue<boolean> | null
    ): UpdateDebtorEventFilter;
    UpdateDebtor(
      account?: PromiseOrValue<string> | null,
      isDebtor?: PromiseOrValue<boolean> | null
    ): UpdateDebtorEventFilter;

    "UpdateRewardReceiver(address,address)"(
      account?: PromiseOrValue<string> | null,
      receiver?: PromiseOrValue<string> | null
    ): UpdateRewardReceiverEventFilter;
    UpdateRewardReceiver(
      account?: PromiseOrValue<string> | null,
      receiver?: PromiseOrValue<string> | null
    ): UpdateRewardReceiverEventFilter;

    "UpdateSupplierRewardIndex(address,address,address,uint256,uint256)"(
      rewardToken?: PromiseOrValue<string> | null,
      cToken?: PromiseOrValue<string> | null,
      supplier?: PromiseOrValue<string> | null,
      rewards?: null,
      supplyIndex?: null
    ): UpdateSupplierRewardIndexEventFilter;
    UpdateSupplierRewardIndex(
      rewardToken?: PromiseOrValue<string> | null,
      cToken?: PromiseOrValue<string> | null,
      supplier?: PromiseOrValue<string> | null,
      rewards?: null,
      supplyIndex?: null
    ): UpdateSupplierRewardIndexEventFilter;

    "UpdateSupplyRewardSpeed(address,address,uint256,uint256,uint256)"(
      rewardToken?: PromiseOrValue<string> | null,
      cToken?: PromiseOrValue<string> | null,
      speed?: PromiseOrValue<BigNumberish> | null,
      start?: null,
      end?: null
    ): UpdateSupplyRewardSpeedEventFilter;
    UpdateSupplyRewardSpeed(
      rewardToken?: PromiseOrValue<string> | null,
      cToken?: PromiseOrValue<string> | null,
      speed?: PromiseOrValue<BigNumberish> | null,
      start?: null,
      end?: null
    ): UpdateSupplyRewardSpeedEventFilter;

    "Upgraded(address)"(
      implementation?: PromiseOrValue<string> | null
    ): UpgradedEventFilter;
    Upgraded(
      implementation?: PromiseOrValue<string> | null
    ): UpgradedEventFilter;
  };

  estimateGas: {
    addRewardToken(
      rewardToken: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    claimAllRewards(
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    claimRewards(
      account: PromiseOrValue<string>,
      cTokens: PromiseOrValue<string>[],
      rewards: PromiseOrValue<string>[],
      borrowers: PromiseOrValue<boolean>,
      suppliers: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    claimSingleReward(
      account: PromiseOrValue<string>,
      reward: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    comptroller(overrides?: CallOverrides): Promise<BigNumber>;

    debtors(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getBlockTimestamp(overrides?: CallOverrides): Promise<BigNumber>;

    getMarketRewardSpeeds(
      cToken: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getMultipleMarketRewardSpeeds(
      cTokens: PromiseOrValue<string>[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getRewardTokenInfo(
      rewardToken: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getRewardTokenList(overrides?: CallOverrides): Promise<BigNumber>;

    getRewardsAvailable(
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    harnessTransferReward(
      rewardToken: PromiseOrValue<string>,
      user: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    harnessUpdateGlobalBorrowIndex(
      rewardToken: PromiseOrValue<string>,
      cToken: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    harnessUpdateGlobalSupplyIndex(
      rewardToken: PromiseOrValue<string>,
      cToken: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    initialize(
      _admin: PromiseOrValue<string>,
      _comptroller: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    proxiableUUID(overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    rewardAccrued(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    rewardBorrowSpeeds(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    rewardBorrowState(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    rewardBorrowerIndex(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      arg2: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    rewardReceivers(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    rewardSupplierIndex(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      arg2: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    rewardSupplySpeeds(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    rewardSupplyState(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    rewardTokens(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    rewardTokensMap(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    setBlockTimestamp(
      timestamp: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setRewardBorrowSpeeds(
      rewardToken: PromiseOrValue<string>,
      cTokens: PromiseOrValue<string>[],
      speeds: PromiseOrValue<BigNumberish>[],
      starts: PromiseOrValue<BigNumberish>[],
      ends: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setRewardSupplySpeeds(
      rewardToken: PromiseOrValue<string>,
      cTokens: PromiseOrValue<string>[],
      speeds: PromiseOrValue<BigNumberish>[],
      starts: PromiseOrValue<BigNumberish>[],
      ends: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setRewardsReceiver(
      account: PromiseOrValue<string>,
      receiver: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    updateBorrowIndex(
      cToken: PromiseOrValue<string>,
      borrowers: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    updateDebtors(
      accounts: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    updateSupplyIndex(
      cToken: PromiseOrValue<string>,
      suppliers: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    upgradeTo(
      newImplementation: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    upgradeToAndCall(
      newImplementation: PromiseOrValue<string>,
      data: PromiseOrValue<BytesLike>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    addRewardToken(
      rewardToken: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    claimAllRewards(
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    claimRewards(
      account: PromiseOrValue<string>,
      cTokens: PromiseOrValue<string>[],
      rewards: PromiseOrValue<string>[],
      borrowers: PromiseOrValue<boolean>,
      suppliers: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    claimSingleReward(
      account: PromiseOrValue<string>,
      reward: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    comptroller(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    debtors(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getBlockTimestamp(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getMarketRewardSpeeds(
      cToken: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getMultipleMarketRewardSpeeds(
      cTokens: PromiseOrValue<string>[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getRewardTokenInfo(
      rewardToken: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getRewardTokenList(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getRewardsAvailable(
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    harnessTransferReward(
      rewardToken: PromiseOrValue<string>,
      user: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    harnessUpdateGlobalBorrowIndex(
      rewardToken: PromiseOrValue<string>,
      cToken: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    harnessUpdateGlobalSupplyIndex(
      rewardToken: PromiseOrValue<string>,
      cToken: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    initialize(
      _admin: PromiseOrValue<string>,
      _comptroller: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    proxiableUUID(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    rewardAccrued(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    rewardBorrowSpeeds(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    rewardBorrowState(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    rewardBorrowerIndex(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      arg2: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    rewardReceivers(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    rewardSupplierIndex(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      arg2: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    rewardSupplySpeeds(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    rewardSupplyState(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    rewardTokens(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    rewardTokensMap(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    setBlockTimestamp(
      timestamp: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setRewardBorrowSpeeds(
      rewardToken: PromiseOrValue<string>,
      cTokens: PromiseOrValue<string>[],
      speeds: PromiseOrValue<BigNumberish>[],
      starts: PromiseOrValue<BigNumberish>[],
      ends: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setRewardSupplySpeeds(
      rewardToken: PromiseOrValue<string>,
      cTokens: PromiseOrValue<string>[],
      speeds: PromiseOrValue<BigNumberish>[],
      starts: PromiseOrValue<BigNumberish>[],
      ends: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setRewardsReceiver(
      account: PromiseOrValue<string>,
      receiver: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    updateBorrowIndex(
      cToken: PromiseOrValue<string>,
      borrowers: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    updateDebtors(
      accounts: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    updateSupplyIndex(
      cToken: PromiseOrValue<string>,
      suppliers: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    upgradeTo(
      newImplementation: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    upgradeToAndCall(
      newImplementation: PromiseOrValue<string>,
      data: PromiseOrValue<BytesLike>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
