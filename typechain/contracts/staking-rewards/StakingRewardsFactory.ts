/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../common";

export interface StakingRewardsFactoryInterface extends utils.Interface {
  functions: {
    "_stakingTokenMap(address)": FunctionFragment;
    "createStakingRewards(address[],address)": FunctionFragment;
    "getAllStakingRewards()": FunctionFragment;
    "getStakingRewards(address)": FunctionFragment;
    "getStakingRewardsCount()": FunctionFragment;
    "getStakingToken(address)": FunctionFragment;
    "owner()": FunctionFragment;
    "removeStakingRewards(address)": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "seize(address,uint256)": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "_stakingTokenMap"
      | "createStakingRewards"
      | "getAllStakingRewards"
      | "getStakingRewards"
      | "getStakingRewardsCount"
      | "getStakingToken"
      | "owner"
      | "removeStakingRewards"
      | "renounceOwnership"
      | "seize"
      | "transferOwnership"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "_stakingTokenMap",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "createStakingRewards",
    values: [PromiseOrValue<string>[], PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getAllStakingRewards",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getStakingRewards",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getStakingRewardsCount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getStakingToken",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "removeStakingRewards",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "seize",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [PromiseOrValue<string>]
  ): string;

  decodeFunctionResult(
    functionFragment: "_stakingTokenMap",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createStakingRewards",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAllStakingRewards",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getStakingRewards",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getStakingRewardsCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getStakingToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "removeStakingRewards",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "seize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;

  events: {
    "OwnershipTransferred(address,address)": EventFragment;
    "StakingRewardsCreated(address,address)": EventFragment;
    "StakingRewardsRemoved(address)": EventFragment;
    "TokenSeized(address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "StakingRewardsCreated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "StakingRewardsRemoved"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TokenSeized"): EventFragment;
}

export interface OwnershipTransferredEventObject {
  previousOwner: string;
  newOwner: string;
}
export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  OwnershipTransferredEventObject
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export interface StakingRewardsCreatedEventObject {
  stakingRewards: string;
  stakingToken: string;
}
export type StakingRewardsCreatedEvent = TypedEvent<
  [string, string],
  StakingRewardsCreatedEventObject
>;

export type StakingRewardsCreatedEventFilter =
  TypedEventFilter<StakingRewardsCreatedEvent>;

export interface StakingRewardsRemovedEventObject {
  stakingToken: string;
}
export type StakingRewardsRemovedEvent = TypedEvent<
  [string],
  StakingRewardsRemovedEventObject
>;

export type StakingRewardsRemovedEventFilter =
  TypedEventFilter<StakingRewardsRemovedEvent>;

export interface TokenSeizedEventObject {
  token: string;
  amount: BigNumber;
}
export type TokenSeizedEvent = TypedEvent<
  [string, BigNumber],
  TokenSeizedEventObject
>;

export type TokenSeizedEventFilter = TypedEventFilter<TokenSeizedEvent>;

export interface StakingRewardsFactory extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: StakingRewardsFactoryInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    _stakingTokenMap(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    createStakingRewards(
      stakingTokens: PromiseOrValue<string>[],
      helperContract: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    getAllStakingRewards(overrides?: CallOverrides): Promise<[string[]]>;

    getStakingRewards(
      stakingToken: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getStakingRewardsCount(overrides?: CallOverrides): Promise<[BigNumber]>;

    getStakingToken(
      underlying: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    removeStakingRewards(
      stakingToken: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    seize(
      token: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  _stakingTokenMap(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<string>;

  createStakingRewards(
    stakingTokens: PromiseOrValue<string>[],
    helperContract: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  getAllStakingRewards(overrides?: CallOverrides): Promise<string[]>;

  getStakingRewards(
    stakingToken: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<string>;

  getStakingRewardsCount(overrides?: CallOverrides): Promise<BigNumber>;

  getStakingToken(
    underlying: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<string>;

  owner(overrides?: CallOverrides): Promise<string>;

  removeStakingRewards(
    stakingToken: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  renounceOwnership(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  seize(
    token: PromiseOrValue<string>,
    amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  transferOwnership(
    newOwner: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    _stakingTokenMap(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<string>;

    createStakingRewards(
      stakingTokens: PromiseOrValue<string>[],
      helperContract: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    getAllStakingRewards(overrides?: CallOverrides): Promise<string[]>;

    getStakingRewards(
      stakingToken: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<string>;

    getStakingRewardsCount(overrides?: CallOverrides): Promise<BigNumber>;

    getStakingToken(
      underlying: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<string>;

    owner(overrides?: CallOverrides): Promise<string>;

    removeStakingRewards(
      stakingToken: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    seize(
      token: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "OwnershipTransferred(address,address)"(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;

    "StakingRewardsCreated(address,address)"(
      stakingRewards?: PromiseOrValue<string> | null,
      stakingToken?: PromiseOrValue<string> | null
    ): StakingRewardsCreatedEventFilter;
    StakingRewardsCreated(
      stakingRewards?: PromiseOrValue<string> | null,
      stakingToken?: PromiseOrValue<string> | null
    ): StakingRewardsCreatedEventFilter;

    "StakingRewardsRemoved(address)"(
      stakingToken?: PromiseOrValue<string> | null
    ): StakingRewardsRemovedEventFilter;
    StakingRewardsRemoved(
      stakingToken?: PromiseOrValue<string> | null
    ): StakingRewardsRemovedEventFilter;

    "TokenSeized(address,uint256)"(
      token?: null,
      amount?: null
    ): TokenSeizedEventFilter;
    TokenSeized(token?: null, amount?: null): TokenSeizedEventFilter;
  };

  estimateGas: {
    _stakingTokenMap(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    createStakingRewards(
      stakingTokens: PromiseOrValue<string>[],
      helperContract: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    getAllStakingRewards(overrides?: CallOverrides): Promise<BigNumber>;

    getStakingRewards(
      stakingToken: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getStakingRewardsCount(overrides?: CallOverrides): Promise<BigNumber>;

    getStakingToken(
      underlying: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    removeStakingRewards(
      stakingToken: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    seize(
      token: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    _stakingTokenMap(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    createStakingRewards(
      stakingTokens: PromiseOrValue<string>[],
      helperContract: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    getAllStakingRewards(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getStakingRewards(
      stakingToken: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getStakingRewardsCount(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getStakingToken(
      underlying: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    removeStakingRewards(
      stakingToken: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    seize(
      token: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
