/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../../common";

export interface MockReserveManagerInterface extends utils.Interface {
  functions: {
    "COOLDOWN_PERIOD()": FunctionFragment;
    "adjustRatio(uint256)": FunctionFragment;
    "burners(address)": FunctionFragment;
    "cTokenAdmins(address)": FunctionFragment;
    "comptroller()": FunctionFragment;
    "dispatchMultiple(address[])": FunctionFragment;
    "dispatcher()": FunctionFragment;
    "ethAddress()": FunctionFragment;
    "getBlockTimestamp()": FunctionFragment;
    "isBlocked(address)": FunctionFragment;
    "isNativeMarket(address)": FunctionFragment;
    "manualBurn(address)": FunctionFragment;
    "manualBurner()": FunctionFragment;
    "owner()": FunctionFragment;
    "ratio()": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "reservesSnapshot(address)": FunctionFragment;
    "seize(address,uint256)": FunctionFragment;
    "setBlockTimestamp(uint256)": FunctionFragment;
    "setBlocked(address[],bool[])": FunctionFragment;
    "setBurners(address[],address[])": FunctionFragment;
    "setDispatcher(address)": FunctionFragment;
    "setManualBurn(address[],bool[])": FunctionFragment;
    "setManualBurner(address)": FunctionFragment;
    "setNativeMarket(address,bool)": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "usdcAddress()": FunctionFragment;
    "wethAddress()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "COOLDOWN_PERIOD"
      | "adjustRatio"
      | "burners"
      | "cTokenAdmins"
      | "comptroller"
      | "dispatchMultiple"
      | "dispatcher"
      | "ethAddress"
      | "getBlockTimestamp"
      | "isBlocked"
      | "isNativeMarket"
      | "manualBurn"
      | "manualBurner"
      | "owner"
      | "ratio"
      | "renounceOwnership"
      | "reservesSnapshot"
      | "seize"
      | "setBlockTimestamp"
      | "setBlocked"
      | "setBurners"
      | "setDispatcher"
      | "setManualBurn"
      | "setManualBurner"
      | "setNativeMarket"
      | "transferOwnership"
      | "usdcAddress"
      | "wethAddress"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "COOLDOWN_PERIOD",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "adjustRatio",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "burners",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "cTokenAdmins",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "comptroller",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "dispatchMultiple",
    values: [PromiseOrValue<string>[]]
  ): string;
  encodeFunctionData(
    functionFragment: "dispatcher",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "ethAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getBlockTimestamp",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "isBlocked",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "isNativeMarket",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "manualBurn",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "manualBurner",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(functionFragment: "ratio", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "reservesSnapshot",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "seize",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "setBlockTimestamp",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "setBlocked",
    values: [PromiseOrValue<string>[], PromiseOrValue<boolean>[]]
  ): string;
  encodeFunctionData(
    functionFragment: "setBurners",
    values: [PromiseOrValue<string>[], PromiseOrValue<string>[]]
  ): string;
  encodeFunctionData(
    functionFragment: "setDispatcher",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setManualBurn",
    values: [PromiseOrValue<string>[], PromiseOrValue<boolean>[]]
  ): string;
  encodeFunctionData(
    functionFragment: "setManualBurner",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setNativeMarket",
    values: [PromiseOrValue<string>, PromiseOrValue<boolean>]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "usdcAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "wethAddress",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "COOLDOWN_PERIOD",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "adjustRatio",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "burners", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "cTokenAdmins",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "comptroller",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "dispatchMultiple",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "dispatcher", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "ethAddress", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getBlockTimestamp",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "isBlocked", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isNativeMarket",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "manualBurn", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "manualBurner",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "ratio", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "reservesSnapshot",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "seize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setBlockTimestamp",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setBlocked", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setBurners", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setDispatcher",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setManualBurn",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setManualBurner",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setNativeMarket",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "usdcAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "wethAddress",
    data: BytesLike
  ): Result;

  events: {
    "BurnerUpdated(address,address,address)": EventFragment;
    "Dispatch(address,uint256,address)": EventFragment;
    "DispatcherSet(address)": EventFragment;
    "ManualBurnerUpdated(address,address)": EventFragment;
    "MarketBlocked(address,bool,bool)": EventFragment;
    "MarketManualBurn(address,bool,bool)": EventFragment;
    "NativeMarketUpdated(address,bool)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "RatioUpdated(uint256,uint256)": EventFragment;
    "TokenSeized(address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "BurnerUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Dispatch"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "DispatcherSet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ManualBurnerUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "MarketBlocked"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "MarketManualBurn"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "NativeMarketUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RatioUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TokenSeized"): EventFragment;
}

export interface BurnerUpdatedEventObject {
  cToken: string;
  oldBurner: string;
  newBurner: string;
}
export type BurnerUpdatedEvent = TypedEvent<
  [string, string, string],
  BurnerUpdatedEventObject
>;

export type BurnerUpdatedEventFilter = TypedEventFilter<BurnerUpdatedEvent>;

export interface DispatchEventObject {
  token: string;
  amount: BigNumber;
  destination: string;
}
export type DispatchEvent = TypedEvent<
  [string, BigNumber, string],
  DispatchEventObject
>;

export type DispatchEventFilter = TypedEventFilter<DispatchEvent>;

export interface DispatcherSetEventObject {
  dispatcher: string;
}
export type DispatcherSetEvent = TypedEvent<[string], DispatcherSetEventObject>;

export type DispatcherSetEventFilter = TypedEventFilter<DispatcherSetEvent>;

export interface ManualBurnerUpdatedEventObject {
  oldManualBurner: string;
  newManualBurner: string;
}
export type ManualBurnerUpdatedEvent = TypedEvent<
  [string, string],
  ManualBurnerUpdatedEventObject
>;

export type ManualBurnerUpdatedEventFilter =
  TypedEventFilter<ManualBurnerUpdatedEvent>;

export interface MarketBlockedEventObject {
  cToken: string;
  wasBlocked: boolean;
  isBlocked: boolean;
}
export type MarketBlockedEvent = TypedEvent<
  [string, boolean, boolean],
  MarketBlockedEventObject
>;

export type MarketBlockedEventFilter = TypedEventFilter<MarketBlockedEvent>;

export interface MarketManualBurnEventObject {
  cToken: string;
  wasManual: boolean;
  isManual: boolean;
}
export type MarketManualBurnEvent = TypedEvent<
  [string, boolean, boolean],
  MarketManualBurnEventObject
>;

export type MarketManualBurnEventFilter =
  TypedEventFilter<MarketManualBurnEvent>;

export interface NativeMarketUpdatedEventObject {
  cToken: string;
  isNative: boolean;
}
export type NativeMarketUpdatedEvent = TypedEvent<
  [string, boolean],
  NativeMarketUpdatedEventObject
>;

export type NativeMarketUpdatedEventFilter =
  TypedEventFilter<NativeMarketUpdatedEvent>;

export interface OwnershipTransferredEventObject {
  previousOwner: string;
  newOwner: string;
}
export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  OwnershipTransferredEventObject
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export interface RatioUpdatedEventObject {
  oldRatio: BigNumber;
  newRatio: BigNumber;
}
export type RatioUpdatedEvent = TypedEvent<
  [BigNumber, BigNumber],
  RatioUpdatedEventObject
>;

export type RatioUpdatedEventFilter = TypedEventFilter<RatioUpdatedEvent>;

export interface TokenSeizedEventObject {
  token: string;
  amount: BigNumber;
}
export type TokenSeizedEvent = TypedEvent<
  [string, BigNumber],
  TokenSeizedEventObject
>;

export type TokenSeizedEventFilter = TypedEventFilter<TokenSeizedEvent>;

export interface MockReserveManager extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: MockReserveManagerInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    COOLDOWN_PERIOD(overrides?: CallOverrides): Promise<[BigNumber]>;

    adjustRatio(
      newRatio: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    burners(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    cTokenAdmins(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    comptroller(overrides?: CallOverrides): Promise<[string]>;

    dispatchMultiple(
      cTokens: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    dispatcher(overrides?: CallOverrides): Promise<[string]>;

    ethAddress(overrides?: CallOverrides): Promise<[string]>;

    getBlockTimestamp(overrides?: CallOverrides): Promise<[BigNumber]>;

    isBlocked(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    isNativeMarket(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    manualBurn(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    manualBurner(overrides?: CallOverrides): Promise<[string]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    ratio(overrides?: CallOverrides): Promise<[BigNumber]>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    reservesSnapshot(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & {
        timestamp: BigNumber;
        totalReserves: BigNumber;
      }
    >;

    seize(
      token: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setBlockTimestamp(
      timestamp: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setBlocked(
      cTokens: PromiseOrValue<string>[],
      blocked: PromiseOrValue<boolean>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setBurners(
      cTokens: PromiseOrValue<string>[],
      newBurners: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setDispatcher(
      newDispatcher: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setManualBurn(
      cTokens: PromiseOrValue<string>[],
      manual: PromiseOrValue<boolean>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setManualBurner(
      newManualBurner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setNativeMarket(
      cToken: PromiseOrValue<string>,
      isNative: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    usdcAddress(overrides?: CallOverrides): Promise<[string]>;

    wethAddress(overrides?: CallOverrides): Promise<[string]>;
  };

  COOLDOWN_PERIOD(overrides?: CallOverrides): Promise<BigNumber>;

  adjustRatio(
    newRatio: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  burners(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<string>;

  cTokenAdmins(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<string>;

  comptroller(overrides?: CallOverrides): Promise<string>;

  dispatchMultiple(
    cTokens: PromiseOrValue<string>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  dispatcher(overrides?: CallOverrides): Promise<string>;

  ethAddress(overrides?: CallOverrides): Promise<string>;

  getBlockTimestamp(overrides?: CallOverrides): Promise<BigNumber>;

  isBlocked(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  isNativeMarket(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  manualBurn(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  manualBurner(overrides?: CallOverrides): Promise<string>;

  owner(overrides?: CallOverrides): Promise<string>;

  ratio(overrides?: CallOverrides): Promise<BigNumber>;

  renounceOwnership(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  reservesSnapshot(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber] & { timestamp: BigNumber; totalReserves: BigNumber }
  >;

  seize(
    token: PromiseOrValue<string>,
    amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setBlockTimestamp(
    timestamp: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setBlocked(
    cTokens: PromiseOrValue<string>[],
    blocked: PromiseOrValue<boolean>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setBurners(
    cTokens: PromiseOrValue<string>[],
    newBurners: PromiseOrValue<string>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setDispatcher(
    newDispatcher: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setManualBurn(
    cTokens: PromiseOrValue<string>[],
    manual: PromiseOrValue<boolean>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setManualBurner(
    newManualBurner: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setNativeMarket(
    cToken: PromiseOrValue<string>,
    isNative: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  transferOwnership(
    newOwner: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  usdcAddress(overrides?: CallOverrides): Promise<string>;

  wethAddress(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    COOLDOWN_PERIOD(overrides?: CallOverrides): Promise<BigNumber>;

    adjustRatio(
      newRatio: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    burners(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<string>;

    cTokenAdmins(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<string>;

    comptroller(overrides?: CallOverrides): Promise<string>;

    dispatchMultiple(
      cTokens: PromiseOrValue<string>[],
      overrides?: CallOverrides
    ): Promise<void>;

    dispatcher(overrides?: CallOverrides): Promise<string>;

    ethAddress(overrides?: CallOverrides): Promise<string>;

    getBlockTimestamp(overrides?: CallOverrides): Promise<BigNumber>;

    isBlocked(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    isNativeMarket(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    manualBurn(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    manualBurner(overrides?: CallOverrides): Promise<string>;

    owner(overrides?: CallOverrides): Promise<string>;

    ratio(overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    reservesSnapshot(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & {
        timestamp: BigNumber;
        totalReserves: BigNumber;
      }
    >;

    seize(
      token: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setBlockTimestamp(
      timestamp: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setBlocked(
      cTokens: PromiseOrValue<string>[],
      blocked: PromiseOrValue<boolean>[],
      overrides?: CallOverrides
    ): Promise<void>;

    setBurners(
      cTokens: PromiseOrValue<string>[],
      newBurners: PromiseOrValue<string>[],
      overrides?: CallOverrides
    ): Promise<void>;

    setDispatcher(
      newDispatcher: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    setManualBurn(
      cTokens: PromiseOrValue<string>[],
      manual: PromiseOrValue<boolean>[],
      overrides?: CallOverrides
    ): Promise<void>;

    setManualBurner(
      newManualBurner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    setNativeMarket(
      cToken: PromiseOrValue<string>,
      isNative: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<void>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    usdcAddress(overrides?: CallOverrides): Promise<string>;

    wethAddress(overrides?: CallOverrides): Promise<string>;
  };

  filters: {
    "BurnerUpdated(address,address,address)"(
      cToken?: null,
      oldBurner?: null,
      newBurner?: null
    ): BurnerUpdatedEventFilter;
    BurnerUpdated(
      cToken?: null,
      oldBurner?: null,
      newBurner?: null
    ): BurnerUpdatedEventFilter;

    "Dispatch(address,uint256,address)"(
      token?: PromiseOrValue<string> | null,
      amount?: PromiseOrValue<BigNumberish> | null,
      destination?: null
    ): DispatchEventFilter;
    Dispatch(
      token?: PromiseOrValue<string> | null,
      amount?: PromiseOrValue<BigNumberish> | null,
      destination?: null
    ): DispatchEventFilter;

    "DispatcherSet(address)"(dispatcher?: null): DispatcherSetEventFilter;
    DispatcherSet(dispatcher?: null): DispatcherSetEventFilter;

    "ManualBurnerUpdated(address,address)"(
      oldManualBurner?: null,
      newManualBurner?: null
    ): ManualBurnerUpdatedEventFilter;
    ManualBurnerUpdated(
      oldManualBurner?: null,
      newManualBurner?: null
    ): ManualBurnerUpdatedEventFilter;

    "MarketBlocked(address,bool,bool)"(
      cToken?: null,
      wasBlocked?: null,
      isBlocked?: null
    ): MarketBlockedEventFilter;
    MarketBlocked(
      cToken?: null,
      wasBlocked?: null,
      isBlocked?: null
    ): MarketBlockedEventFilter;

    "MarketManualBurn(address,bool,bool)"(
      cToken?: null,
      wasManual?: null,
      isManual?: null
    ): MarketManualBurnEventFilter;
    MarketManualBurn(
      cToken?: null,
      wasManual?: null,
      isManual?: null
    ): MarketManualBurnEventFilter;

    "NativeMarketUpdated(address,bool)"(
      cToken?: null,
      isNative?: null
    ): NativeMarketUpdatedEventFilter;
    NativeMarketUpdated(
      cToken?: null,
      isNative?: null
    ): NativeMarketUpdatedEventFilter;

    "OwnershipTransferred(address,address)"(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;

    "RatioUpdated(uint256,uint256)"(
      oldRatio?: null,
      newRatio?: null
    ): RatioUpdatedEventFilter;
    RatioUpdated(oldRatio?: null, newRatio?: null): RatioUpdatedEventFilter;

    "TokenSeized(address,uint256)"(
      token?: null,
      amount?: null
    ): TokenSeizedEventFilter;
    TokenSeized(token?: null, amount?: null): TokenSeizedEventFilter;
  };

  estimateGas: {
    COOLDOWN_PERIOD(overrides?: CallOverrides): Promise<BigNumber>;

    adjustRatio(
      newRatio: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    burners(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    cTokenAdmins(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    comptroller(overrides?: CallOverrides): Promise<BigNumber>;

    dispatchMultiple(
      cTokens: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    dispatcher(overrides?: CallOverrides): Promise<BigNumber>;

    ethAddress(overrides?: CallOverrides): Promise<BigNumber>;

    getBlockTimestamp(overrides?: CallOverrides): Promise<BigNumber>;

    isBlocked(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isNativeMarket(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    manualBurn(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    manualBurner(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    ratio(overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    reservesSnapshot(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    seize(
      token: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setBlockTimestamp(
      timestamp: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setBlocked(
      cTokens: PromiseOrValue<string>[],
      blocked: PromiseOrValue<boolean>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setBurners(
      cTokens: PromiseOrValue<string>[],
      newBurners: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setDispatcher(
      newDispatcher: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setManualBurn(
      cTokens: PromiseOrValue<string>[],
      manual: PromiseOrValue<boolean>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setManualBurner(
      newManualBurner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setNativeMarket(
      cToken: PromiseOrValue<string>,
      isNative: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    usdcAddress(overrides?: CallOverrides): Promise<BigNumber>;

    wethAddress(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    COOLDOWN_PERIOD(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    adjustRatio(
      newRatio: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    burners(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    cTokenAdmins(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    comptroller(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    dispatchMultiple(
      cTokens: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    dispatcher(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    ethAddress(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getBlockTimestamp(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    isBlocked(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isNativeMarket(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    manualBurn(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    manualBurner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    ratio(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    reservesSnapshot(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    seize(
      token: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setBlockTimestamp(
      timestamp: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setBlocked(
      cTokens: PromiseOrValue<string>[],
      blocked: PromiseOrValue<boolean>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setBurners(
      cTokens: PromiseOrValue<string>[],
      newBurners: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setDispatcher(
      newDispatcher: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setManualBurn(
      cTokens: PromiseOrValue<string>[],
      manual: PromiseOrValue<boolean>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setManualBurner(
      newManualBurner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setNativeMarket(
      cToken: PromiseOrValue<string>,
      isNative: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    usdcAddress(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    wethAddress(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
